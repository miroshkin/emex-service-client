//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmExServiceClient.ContrafactService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContrafactFilter", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class ContrafactFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InvoiceNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierLogoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateFrom {
            get {
                return this.DateFromField;
            }
            set {
                if ((this.DateFromField.Equals(value) != true)) {
                    this.DateFromField = value;
                    this.RaisePropertyChanged("DateFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTo {
            get {
                return this.DateToField;
            }
            set {
                if ((this.DateToField.Equals(value) != true)) {
                    this.DateToField = value;
                    this.RaisePropertyChanged("DateTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailNum {
            get {
                return this.DetailNumField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNumField, value) != true)) {
                    this.DetailNumField = value;
                    this.RaisePropertyChanged("DetailNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InvoiceNumber {
            get {
                return this.InvoiceNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.InvoiceNumberField, value) != true)) {
                    this.InvoiceNumberField = value;
                    this.RaisePropertyChanged("InvoiceNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierLogo {
            get {
                return this.SupplierLogoField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierLogoField, value) != true)) {
                    this.SupplierLogoField = value;
                    this.RaisePropertyChanged("SupplierLogo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResult", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EmExServiceClient.ContrafactService.OperationResultContrafactInfoDetalization))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EmExServiceClient.ContrafactService.OperationResultWithFiles))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitModelInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EmExServiceClient.ContrafactService.OperationResultArrayOfContrafactComment))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitSupplierInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EmExServiceClient.ContrafactService.OperationResultCounterfeitModelInfoDetalization))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitModelFeature))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EmExServiceClient.ContrafactService.OperationResultStickerDescription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EmExServiceClient.ContrafactService.OperationResultArrayOfPossibleCounterfeitDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EmExServiceClient.ContrafactService.OperationResultArrayOfContrafactInfo))]
    public partial class OperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRepeatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRepeat {
            get {
                return this.IsRepeatField;
            }
            set {
                if ((this.IsRepeatField.Equals(value) != true)) {
                    this.IsRepeatField = value;
                    this.RaisePropertyChanged("IsRepeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultContrafactInfoDetalization", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    public partial class OperationResultContrafactInfoDetalization : EmExServiceClient.ContrafactService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.ContrafactInfoDetalization OperationObjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.ContrafactInfoDetalization OperationObject {
            get {
                return this.OperationObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationObjectField, value) != true)) {
                    this.OperationObjectField = value;
                    this.RaisePropertyChanged("OperationObject");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultWithFiles", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    public partial class OperationResultWithFiles : EmExServiceClient.ContrafactService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.FileDescription[] FilesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.FileDescription[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultArrayOfCounterfeitModelInfo", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    public partial class OperationResultArrayOfCounterfeitModelInfo : EmExServiceClient.ContrafactService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.CounterfeitModelInfo[] OperationObjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.CounterfeitModelInfo[] OperationObject {
            get {
                return this.OperationObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationObjectField, value) != true)) {
                    this.OperationObjectField = value;
                    this.RaisePropertyChanged("OperationObject");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultArrayOfContrafactComment", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    public partial class OperationResultArrayOfContrafactComment : EmExServiceClient.ContrafactService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.ContrafactComment[] OperationObjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.ContrafactComment[] OperationObject {
            get {
                return this.OperationObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationObjectField, value) != true)) {
                    this.OperationObjectField = value;
                    this.RaisePropertyChanged("OperationObject");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultArrayOfCounterfeitSupplierInfo", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    public partial class OperationResultArrayOfCounterfeitSupplierInfo : EmExServiceClient.ContrafactService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.CounterfeitSupplierInfo[] OperationObjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.CounterfeitSupplierInfo[] OperationObject {
            get {
                return this.OperationObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationObjectField, value) != true)) {
                    this.OperationObjectField = value;
                    this.RaisePropertyChanged("OperationObject");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultCounterfeitModelInfoDetalization", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    public partial class OperationResultCounterfeitModelInfoDetalization : EmExServiceClient.ContrafactService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.CounterfeitModelInfoDetalization OperationObjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.CounterfeitModelInfoDetalization OperationObject {
            get {
                return this.OperationObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationObjectField, value) != true)) {
                    this.OperationObjectField = value;
                    this.RaisePropertyChanged("OperationObject");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultArrayOfCounterfeitModelFeature", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    public partial class OperationResultArrayOfCounterfeitModelFeature : EmExServiceClient.ContrafactService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.CounterfeitModelFeature[] OperationObjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.CounterfeitModelFeature[] OperationObject {
            get {
                return this.OperationObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationObjectField, value) != true)) {
                    this.OperationObjectField = value;
                    this.RaisePropertyChanged("OperationObject");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultStickerDescription", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    public partial class OperationResultStickerDescription : EmExServiceClient.ContrafactService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.StickerDescription OperationObjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.StickerDescription OperationObject {
            get {
                return this.OperationObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationObjectField, value) != true)) {
                    this.OperationObjectField = value;
                    this.RaisePropertyChanged("OperationObject");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultArrayOfPossibleCounterfeitDetail", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    public partial class OperationResultArrayOfPossibleCounterfeitDetail : EmExServiceClient.ContrafactService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] OperationObjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] OperationObject {
            get {
                return this.OperationObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationObjectField, value) != true)) {
                    this.OperationObjectField = value;
                    this.RaisePropertyChanged("OperationObject");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultArrayOfContrafactInfo", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    public partial class OperationResultArrayOfContrafactInfo : EmExServiceClient.ContrafactService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.ContrafactInfo[] OperationObjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.ContrafactInfo[] OperationObject {
            get {
                return this.OperationObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationObjectField, value) != true)) {
                    this.OperationObjectField = value;
                    this.RaisePropertyChanged("OperationObject");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContrafactInfo", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class ContrafactInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CommentCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContrafactGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContrafactGroupStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DetailIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DetectDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> FeatureAddDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasAppealField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> HasModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime InvoiceDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InvoiceNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPublishField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MakeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ModelHasPhotoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelPlaceCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorFullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PretenziaNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierLogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> WaitDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WriteOffField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CommentCount {
            get {
                return this.CommentCountField;
            }
            set {
                if ((this.CommentCountField.Equals(value) != true)) {
                    this.CommentCountField = value;
                    this.RaisePropertyChanged("CommentCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContrafactGroupId {
            get {
                return this.ContrafactGroupIdField;
            }
            set {
                if ((this.ContrafactGroupIdField.Equals(value) != true)) {
                    this.ContrafactGroupIdField = value;
                    this.RaisePropertyChanged("ContrafactGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContrafactGroupStatusId {
            get {
                return this.ContrafactGroupStatusIdField;
            }
            set {
                if ((this.ContrafactGroupStatusIdField.Equals(value) != true)) {
                    this.ContrafactGroupStatusIdField = value;
                    this.RaisePropertyChanged("ContrafactGroupStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DetailId {
            get {
                return this.DetailIdField;
            }
            set {
                if ((this.DetailIdField.Equals(value) != true)) {
                    this.DetailIdField = value;
                    this.RaisePropertyChanged("DetailId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailName {
            get {
                return this.DetailNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNameField, value) != true)) {
                    this.DetailNameField = value;
                    this.RaisePropertyChanged("DetailName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailNumber {
            get {
                return this.DetailNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNumberField, value) != true)) {
                    this.DetailNumberField = value;
                    this.RaisePropertyChanged("DetailNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DetectDate {
            get {
                return this.DetectDateField;
            }
            set {
                if ((this.DetectDateField.Equals(value) != true)) {
                    this.DetectDateField = value;
                    this.RaisePropertyChanged("DetectDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> FeatureAddDate {
            get {
                return this.FeatureAddDateField;
            }
            set {
                if ((this.FeatureAddDateField.Equals(value) != true)) {
                    this.FeatureAddDateField = value;
                    this.RaisePropertyChanged("FeatureAddDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasAppeal {
            get {
                return this.HasAppealField;
            }
            set {
                if ((this.HasAppealField.Equals(value) != true)) {
                    this.HasAppealField = value;
                    this.RaisePropertyChanged("HasAppeal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> HasModel {
            get {
                return this.HasModelField;
            }
            set {
                if ((this.HasModelField.Equals(value) != true)) {
                    this.HasModelField = value;
                    this.RaisePropertyChanged("HasModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime InvoiceDate {
            get {
                return this.InvoiceDateField;
            }
            set {
                if ((this.InvoiceDateField.Equals(value) != true)) {
                    this.InvoiceDateField = value;
                    this.RaisePropertyChanged("InvoiceDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InvoiceNumber {
            get {
                return this.InvoiceNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.InvoiceNumberField, value) != true)) {
                    this.InvoiceNumberField = value;
                    this.RaisePropertyChanged("InvoiceNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPublish {
            get {
                return this.IsPublishField;
            }
            set {
                if ((this.IsPublishField.Equals(value) != true)) {
                    this.IsPublishField = value;
                    this.RaisePropertyChanged("IsPublish");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MakeName {
            get {
                return this.MakeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MakeNameField, value) != true)) {
                    this.MakeNameField = value;
                    this.RaisePropertyChanged("MakeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> ModelHasPhoto {
            get {
                return this.ModelHasPhotoField;
            }
            set {
                if ((this.ModelHasPhotoField.Equals(value) != true)) {
                    this.ModelHasPhotoField = value;
                    this.RaisePropertyChanged("ModelHasPhoto");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModelPlaceCode {
            get {
                return this.ModelPlaceCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelPlaceCodeField, value) != true)) {
                    this.ModelPlaceCodeField = value;
                    this.RaisePropertyChanged("ModelPlaceCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatorFullName {
            get {
                return this.OperatorFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorFullNameField, value) != true)) {
                    this.OperatorFullNameField = value;
                    this.RaisePropertyChanged("OperatorFullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PretenziaNumber {
            get {
                return this.PretenziaNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PretenziaNumberField, value) != true)) {
                    this.PretenziaNumberField = value;
                    this.RaisePropertyChanged("PretenziaNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierLogo {
            get {
                return this.SupplierLogoField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierLogoField, value) != true)) {
                    this.SupplierLogoField = value;
                    this.RaisePropertyChanged("SupplierLogo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> WaitDate {
            get {
                return this.WaitDateField;
            }
            set {
                if ((this.WaitDateField.Equals(value) != true)) {
                    this.WaitDateField = value;
                    this.RaisePropertyChanged("WaitDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WriteOff {
            get {
                return this.WriteOffField;
            }
            set {
                if ((object.ReferenceEquals(this.WriteOffField, value) != true)) {
                    this.WriteOffField = value;
                    this.RaisePropertyChanged("WriteOff");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContrafactInfoDetalization", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class ContrafactInfoDetalization : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.ContrafactImageType[] ImageTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.ContrafactInfo InfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.User[] OperatorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.ContrafactFeature[] SavedFeaturesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.ContrafactImageType[] ImageTypes {
            get {
                return this.ImageTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageTypesField, value) != true)) {
                    this.ImageTypesField = value;
                    this.RaisePropertyChanged("ImageTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.ContrafactInfo Info {
            get {
                return this.InfoField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoField, value) != true)) {
                    this.InfoField = value;
                    this.RaisePropertyChanged("Info");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.User[] Operators {
            get {
                return this.OperatorsField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorsField, value) != true)) {
                    this.OperatorsField = value;
                    this.RaisePropertyChanged("Operators");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.ContrafactFeature[] SavedFeatures {
            get {
                return this.SavedFeaturesField;
            }
            set {
                if ((object.ReferenceEquals(this.SavedFeaturesField, value) != true)) {
                    this.SavedFeaturesField = value;
                    this.RaisePropertyChanged("SavedFeatures");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContrafactImageType", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class ContrafactImageType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Core.Services.Entities")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserLogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserLogo {
            get {
                return this.UserLogoField;
            }
            set {
                if ((object.ReferenceEquals(this.UserLogoField, value) != true)) {
                    this.UserLogoField = value;
                    this.RaisePropertyChanged("UserLogo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContrafactFeature", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class ContrafactFeature : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContrafactGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] MarkedImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarkedImageFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.ImageMarkDescription[] MarksField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContrafactGroupId {
            get {
                return this.ContrafactGroupIdField;
            }
            set {
                if ((this.ContrafactGroupIdField.Equals(value) != true)) {
                    this.ContrafactGroupIdField = value;
                    this.RaisePropertyChanged("ContrafactGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageFileName {
            get {
                return this.ImageFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageFileNameField, value) != true)) {
                    this.ImageFileNameField = value;
                    this.RaisePropertyChanged("ImageFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageTypeId {
            get {
                return this.ImageTypeIdField;
            }
            set {
                if ((this.ImageTypeIdField.Equals(value) != true)) {
                    this.ImageTypeIdField = value;
                    this.RaisePropertyChanged("ImageTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] MarkedImage {
            get {
                return this.MarkedImageField;
            }
            set {
                if ((object.ReferenceEquals(this.MarkedImageField, value) != true)) {
                    this.MarkedImageField = value;
                    this.RaisePropertyChanged("MarkedImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarkedImageFileName {
            get {
                return this.MarkedImageFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MarkedImageFileNameField, value) != true)) {
                    this.MarkedImageFileNameField = value;
                    this.RaisePropertyChanged("MarkedImageFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.ImageMarkDescription[] Marks {
            get {
                return this.MarksField;
            }
            set {
                if ((object.ReferenceEquals(this.MarksField, value) != true)) {
                    this.MarksField = value;
                    this.RaisePropertyChanged("Marks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageMarkDescription", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class ImageMarkDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XbField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YbField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Order {
            get {
                return this.OrderField;
            }
            set {
                if ((this.OrderField.Equals(value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Xb {
            get {
                return this.XbField;
            }
            set {
                if ((this.XbField.Equals(value) != true)) {
                    this.XbField = value;
                    this.RaisePropertyChanged("Xb");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Xe {
            get {
                return this.XeField;
            }
            set {
                if ((this.XeField.Equals(value) != true)) {
                    this.XeField = value;
                    this.RaisePropertyChanged("Xe");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Yb {
            get {
                return this.YbField;
            }
            set {
                if ((this.YbField.Equals(value) != true)) {
                    this.YbField = value;
                    this.RaisePropertyChanged("Yb");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Ye {
            get {
                return this.YeField;
            }
            set {
                if ((this.YeField.Equals(value) != true)) {
                    this.YeField = value;
                    this.RaisePropertyChanged("Ye");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileDescription", Namespace="http://schemas.datacontract.org/2004/07/Emex.IO")]
    [System.SerializableAttribute()]
    public partial class FileDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[][] ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.FileType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[][] Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.FileType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileType", Namespace="http://schemas.datacontract.org/2004/07/Emex.IO")]
    public enum FileType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Excel = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Word = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EMF = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PDF = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSV = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterfeitModelInfo", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class CounterfeitModelInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreateUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DetailIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> HasPhotoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MakeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ModelIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelPlaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> PriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDateTime {
            get {
                return this.CreateDateTimeField;
            }
            set {
                if ((this.CreateDateTimeField.Equals(value) != true)) {
                    this.CreateDateTimeField = value;
                    this.RaisePropertyChanged("CreateDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreateUser {
            get {
                return this.CreateUserField;
            }
            set {
                if ((object.ReferenceEquals(this.CreateUserField, value) != true)) {
                    this.CreateUserField = value;
                    this.RaisePropertyChanged("CreateUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DetailId {
            get {
                return this.DetailIdField;
            }
            set {
                if ((this.DetailIdField.Equals(value) != true)) {
                    this.DetailIdField = value;
                    this.RaisePropertyChanged("DetailId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailName {
            get {
                return this.DetailNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNameField, value) != true)) {
                    this.DetailNameField = value;
                    this.RaisePropertyChanged("DetailName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailNum {
            get {
                return this.DetailNumField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNumField, value) != true)) {
                    this.DetailNumField = value;
                    this.RaisePropertyChanged("DetailNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> HasPhoto {
            get {
                return this.HasPhotoField;
            }
            set {
                if ((this.HasPhotoField.Equals(value) != true)) {
                    this.HasPhotoField = value;
                    this.RaisePropertyChanged("HasPhoto");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MakeName {
            get {
                return this.MakeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MakeNameField, value) != true)) {
                    this.MakeNameField = value;
                    this.RaisePropertyChanged("MakeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModelId {
            get {
                return this.ModelIdField;
            }
            set {
                if ((this.ModelIdField.Equals(value) != true)) {
                    this.ModelIdField = value;
                    this.RaisePropertyChanged("ModelId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModelPlace {
            get {
                return this.ModelPlaceField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelPlaceField, value) != true)) {
                    this.ModelPlaceField = value;
                    this.RaisePropertyChanged("ModelPlace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContrafactComment", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class ContrafactComment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterfeitSupplierInfo", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class CounterfeitSupplierInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CommentCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CounterfeitIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PretensionListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> SummaryDebtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierLogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UpdateDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CommentCount {
            get {
                return this.CommentCountField;
            }
            set {
                if ((this.CommentCountField.Equals(value) != true)) {
                    this.CommentCountField = value;
                    this.RaisePropertyChanged("CommentCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CounterfeitId {
            get {
                return this.CounterfeitIdField;
            }
            set {
                if ((this.CounterfeitIdField.Equals(value) != true)) {
                    this.CounterfeitIdField = value;
                    this.RaisePropertyChanged("CounterfeitId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] PretensionList {
            get {
                return this.PretensionListField;
            }
            set {
                if ((object.ReferenceEquals(this.PretensionListField, value) != true)) {
                    this.PretensionListField = value;
                    this.RaisePropertyChanged("PretensionList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> SummaryDebt {
            get {
                return this.SummaryDebtField;
            }
            set {
                if ((this.SummaryDebtField.Equals(value) != true)) {
                    this.SummaryDebtField = value;
                    this.RaisePropertyChanged("SummaryDebt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierLogo {
            get {
                return this.SupplierLogoField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierLogoField, value) != true)) {
                    this.SupplierLogoField = value;
                    this.RaisePropertyChanged("SupplierLogo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdateDate {
            get {
                return this.UpdateDateField;
            }
            set {
                if ((this.UpdateDateField.Equals(value) != true)) {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterfeitModelInfoDetalization", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class CounterfeitModelInfoDetalization : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.CounterfeitModelInfo CounterfeitModelInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.CounterfeitModelFeature[] SavedFeaturesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.CounterfeitModelInfo CounterfeitModelInfo {
            get {
                return this.CounterfeitModelInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterfeitModelInfoField, value) != true)) {
                    this.CounterfeitModelInfoField = value;
                    this.RaisePropertyChanged("CounterfeitModelInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.CounterfeitModelFeature[] SavedFeatures {
            get {
                return this.SavedFeaturesField;
            }
            set {
                if ((object.ReferenceEquals(this.SavedFeaturesField, value) != true)) {
                    this.SavedFeaturesField = value;
                    this.RaisePropertyChanged("SavedFeatures");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterfeitModelFeature", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class CounterfeitModelFeature : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ImageFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ModelIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ImageFileId {
            get {
                return this.ImageFileIdField;
            }
            set {
                if ((this.ImageFileIdField.Equals(value) != true)) {
                    this.ImageFileIdField = value;
                    this.RaisePropertyChanged("ImageFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageFileName {
            get {
                return this.ImageFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageFileNameField, value) != true)) {
                    this.ImageFileNameField = value;
                    this.RaisePropertyChanged("ImageFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMain {
            get {
                return this.IsMainField;
            }
            set {
                if ((this.IsMainField.Equals(value) != true)) {
                    this.IsMainField = value;
                    this.RaisePropertyChanged("IsMain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModelId {
            get {
                return this.ModelIdField;
            }
            set {
                if ((this.ModelIdField.Equals(value) != true)) {
                    this.ModelIdField = value;
                    this.RaisePropertyChanged("ModelId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StickerDescription", Namespace="http://schemas.datacontract.org/2004/07/Core.Services.Entities")]
    [System.SerializableAttribute()]
    public partial class StickerDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Specialized.StringDictionary ElementsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TemplateNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Specialized.StringDictionary Elements {
            get {
                return this.ElementsField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementsField, value) != true)) {
                    this.ElementsField = value;
                    this.RaisePropertyChanged("Elements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TemplateName {
            get {
                return this.TemplateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateNameField, value) != true)) {
                    this.TemplateNameField = value;
                    this.RaisePropertyChanged("TemplateName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PossibleCounterfeitDetail", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class PossibleCounterfeitDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasRiskTriggeredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MakeCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailName {
            get {
                return this.DetailNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNameField, value) != true)) {
                    this.DetailNameField = value;
                    this.RaisePropertyChanged("DetailName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailNum {
            get {
                return this.DetailNumField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNumField, value) != true)) {
                    this.DetailNumField = value;
                    this.RaisePropertyChanged("DetailNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasRiskTriggered {
            get {
                return this.HasRiskTriggeredField;
            }
            set {
                if ((this.HasRiskTriggeredField.Equals(value) != true)) {
                    this.HasRiskTriggeredField = value;
                    this.RaisePropertyChanged("HasRiskTriggered");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MakeCode {
            get {
                return this.MakeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.MakeCodeField, value) != true)) {
                    this.MakeCodeField = value;
                    this.RaisePropertyChanged("MakeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reference {
            get {
                return this.ReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferenceField, value) != true)) {
                    this.ReferenceField = value;
                    this.RaisePropertyChanged("Reference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierCode {
            get {
                return this.SupplierCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierCodeField, value) != true)) {
                    this.SupplierCodeField = value;
                    this.RaisePropertyChanged("SupplierCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserAgent", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class UserAgent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppName {
            get {
                return this.AppNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AppNameField, value) != true)) {
                    this.AppNameField = value;
                    this.RaisePropertyChanged("AppName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Host {
            get {
                return this.HostField;
            }
            set {
                if ((object.ReferenceEquals(this.HostField, value) != true)) {
                    this.HostField = value;
                    this.RaisePropertyChanged("Host");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterfeitModelFilter", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class CounterfeitModelFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MakeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailNum {
            get {
                return this.DetailNumField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNumField, value) != true)) {
                    this.DetailNumField = value;
                    this.RaisePropertyChanged("DetailNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MakeName {
            get {
                return this.MakeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MakeNameField, value) != true)) {
                    this.MakeNameField = value;
                    this.RaisePropertyChanged("MakeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterfeitPretensionData", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class CounterfeitPretensionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> ContrafactPretensionAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long CounterfeitActPretenziaIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CounterfeitGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CounterfeitIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasAppealField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPublishField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PretensionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierLogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.ContrafactService.User UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ContrafactPretensionAmount {
            get {
                return this.ContrafactPretensionAmountField;
            }
            set {
                if ((this.ContrafactPretensionAmountField.Equals(value) != true)) {
                    this.ContrafactPretensionAmountField = value;
                    this.RaisePropertyChanged("ContrafactPretensionAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long CounterfeitActPretenziaId {
            get {
                return this.CounterfeitActPretenziaIdField;
            }
            set {
                if ((this.CounterfeitActPretenziaIdField.Equals(value) != true)) {
                    this.CounterfeitActPretenziaIdField = value;
                    this.RaisePropertyChanged("CounterfeitActPretenziaId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CounterfeitGroupId {
            get {
                return this.CounterfeitGroupIdField;
            }
            set {
                if ((this.CounterfeitGroupIdField.Equals(value) != true)) {
                    this.CounterfeitGroupIdField = value;
                    this.RaisePropertyChanged("CounterfeitGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CounterfeitId {
            get {
                return this.CounterfeitIdField;
            }
            set {
                if ((this.CounterfeitIdField.Equals(value) != true)) {
                    this.CounterfeitIdField = value;
                    this.RaisePropertyChanged("CounterfeitId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Emails {
            get {
                return this.EmailsField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailsField, value) != true)) {
                    this.EmailsField = value;
                    this.RaisePropertyChanged("Emails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasAppeal {
            get {
                return this.HasAppealField;
            }
            set {
                if ((this.HasAppealField.Equals(value) != true)) {
                    this.HasAppealField = value;
                    this.RaisePropertyChanged("HasAppeal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsPublish {
            get {
                return this.IsPublishField;
            }
            set {
                if ((this.IsPublishField.Equals(value) != true)) {
                    this.IsPublishField = value;
                    this.RaisePropertyChanged("IsPublish");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PretensionDate {
            get {
                return this.PretensionDateField;
            }
            set {
                if ((this.PretensionDateField.Equals(value) != true)) {
                    this.PretensionDateField = value;
                    this.RaisePropertyChanged("PretensionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierLogo {
            get {
                return this.SupplierLogoField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierLogoField, value) != true)) {
                    this.SupplierLogoField = value;
                    this.RaisePropertyChanged("SupplierLogo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.ContrafactService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageType", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    public enum MessageType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CounterfeitModelCreated = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CounterfeitModelChanged = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CounterfeitModelDeleted = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Supplier", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class Supplier : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SupplierIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SupplierId {
            get {
                return this.SupplierIdField;
            }
            set {
                if ((this.SupplierIdField.Equals(value) != true)) {
                    this.SupplierIdField = value;
                    this.RaisePropertyChanged("SupplierId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterfeitProcessed", Namespace="http://schemas.datacontract.org/2004/07/Counterfeit.Entities.Contrafact")]
    [System.SerializableAttribute()]
    public partial class CounterfeitProcessed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BarcodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExpertDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> ExpertUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ExternalEntityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> IncomeDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> IncomeUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MakeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Barcode {
            get {
                return this.BarcodeField;
            }
            set {
                if ((object.ReferenceEquals(this.BarcodeField, value) != true)) {
                    this.BarcodeField = value;
                    this.RaisePropertyChanged("Barcode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailName {
            get {
                return this.DetailNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNameField, value) != true)) {
                    this.DetailNameField = value;
                    this.RaisePropertyChanged("DetailName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailNum {
            get {
                return this.DetailNumField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNumField, value) != true)) {
                    this.DetailNumField = value;
                    this.RaisePropertyChanged("DetailNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExpertDate {
            get {
                return this.ExpertDateField;
            }
            set {
                if ((this.ExpertDateField.Equals(value) != true)) {
                    this.ExpertDateField = value;
                    this.RaisePropertyChanged("ExpertDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> ExpertUserId {
            get {
                return this.ExpertUserIdField;
            }
            set {
                if ((this.ExpertUserIdField.Equals(value) != true)) {
                    this.ExpertUserIdField = value;
                    this.RaisePropertyChanged("ExpertUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ExternalEntityId {
            get {
                return this.ExternalEntityIdField;
            }
            set {
                if ((this.ExternalEntityIdField.Equals(value) != true)) {
                    this.ExternalEntityIdField = value;
                    this.RaisePropertyChanged("ExternalEntityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> IncomeDate {
            get {
                return this.IncomeDateField;
            }
            set {
                if ((this.IncomeDateField.Equals(value) != true)) {
                    this.IncomeDateField = value;
                    this.RaisePropertyChanged("IncomeDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> IncomeUserId {
            get {
                return this.IncomeUserIdField;
            }
            set {
                if ((this.IncomeUserIdField.Equals(value) != true)) {
                    this.IncomeUserIdField = value;
                    this.RaisePropertyChanged("IncomeUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MakeName {
            get {
                return this.MakeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MakeNameField, value) != true)) {
                    this.MakeNameField = value;
                    this.RaisePropertyChanged("MakeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateCode {
            get {
                return this.StateCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.StateCodeField, value) != true)) {
                    this.StateCodeField = value;
                    this.RaisePropertyChanged("StateCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierCode {
            get {
                return this.SupplierCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierCodeField, value) != true)) {
                    this.SupplierCodeField = value;
                    this.RaisePropertyChanged("SupplierCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeCode {
            get {
                return this.TypeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeCodeField, value) != true)) {
                    this.TypeCodeField = value;
                    this.RaisePropertyChanged("TypeCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ContrafactService.IContrafactService")]
    public interface IContrafactService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetContrafactsDataList", ReplyAction="http://tempuri.org/IContrafactService/GetContrafactsDataListResponse")]
        EmExServiceClient.ContrafactService.OperationResultArrayOfContrafactInfo GetContrafactsDataList(EmExServiceClient.ContrafactService.ContrafactFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetContrafactsDataList", ReplyAction="http://tempuri.org/IContrafactService/GetContrafactsDataListResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultArrayOfContrafactInfo> GetContrafactsDataListAsync(EmExServiceClient.ContrafactService.ContrafactFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/AddCounterfeitFeatures", ReplyAction="http://tempuri.org/IContrafactService/AddCounterfeitFeaturesResponse")]
        EmExServiceClient.ContrafactService.OperationResult AddCounterfeitFeatures(EmExServiceClient.ContrafactService.ContrafactFeature[] features, string detailName, int userId, int operatorUserId, bool isPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/AddCounterfeitFeatures", ReplyAction="http://tempuri.org/IContrafactService/AddCounterfeitFeaturesResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> AddCounterfeitFeaturesAsync(EmExServiceClient.ContrafactService.ContrafactFeature[] features, string detailName, int userId, int operatorUserId, bool isPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/ChangeDetailNaming", ReplyAction="http://tempuri.org/IContrafactService/ChangeDetailNamingResponse")]
        EmExServiceClient.ContrafactService.OperationResult ChangeDetailNaming(EmExServiceClient.ContrafactService.UserAgent userAgent, string detailNum, long detailId, string makeName, string previousDetailNameRus, string newDetailNameRus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/ChangeDetailNaming", ReplyAction="http://tempuri.org/IContrafactService/ChangeDetailNamingResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> ChangeDetailNamingAsync(EmExServiceClient.ContrafactService.UserAgent userAgent, string detailNum, long detailId, string makeName, string previousDetailNameRus, string newDetailNameRus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetCounterfeitsData", ReplyAction="http://tempuri.org/IContrafactService/GetCounterfeitsDataResponse")]
        EmExServiceClient.ContrafactService.OperationResultContrafactInfoDetalization GetCounterfeitsData(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetCounterfeitsData", ReplyAction="http://tempuri.org/IContrafactService/GetCounterfeitsDataResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultContrafactInfoDetalization> GetCounterfeitsDataAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/ReturnContrafactToWork", ReplyAction="http://tempuri.org/IContrafactService/ReturnContrafactToWorkResponse")]
        EmExServiceClient.ContrafactService.OperationResult ReturnContrafactToWork(int contrafactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/ReturnContrafactToWork", ReplyAction="http://tempuri.org/IContrafactService/ReturnContrafactToWorkResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> ReturnContrafactToWorkAsync(int contrafactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CreateActContrafact", ReplyAction="http://tempuri.org/IContrafactService/CreateActContrafactResponse")]
        EmExServiceClient.ContrafactService.OperationResultWithFiles CreateActContrafact(string contrafactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CreateActContrafact", ReplyAction="http://tempuri.org/IContrafactService/CreateActContrafactResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultWithFiles> CreateActContrafactAsync(string contrafactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetCounterfeitModelsList", ReplyAction="http://tempuri.org/IContrafactService/GetCounterfeitModelsListResponse")]
        EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitModelInfo GetCounterfeitModelsList(EmExServiceClient.ContrafactService.CounterfeitModelFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetCounterfeitModelsList", ReplyAction="http://tempuri.org/IContrafactService/GetCounterfeitModelsListResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitModelInfo> GetCounterfeitModelsListAsync(EmExServiceClient.ContrafactService.CounterfeitModelFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetCommentsByContrafactId", ReplyAction="http://tempuri.org/IContrafactService/GetCommentsByContrafactIdResponse")]
        EmExServiceClient.ContrafactService.OperationResultArrayOfContrafactComment GetCommentsByContrafactId(int contrafactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetCommentsByContrafactId", ReplyAction="http://tempuri.org/IContrafactService/GetCommentsByContrafactIdResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultArrayOfContrafactComment> GetCommentsByContrafactIdAsync(int contrafactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/AddCommentToContrafact", ReplyAction="http://tempuri.org/IContrafactService/AddCommentToContrafactResponse")]
        EmExServiceClient.ContrafactService.OperationResult AddCommentToContrafact(int contrafactId, int userId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/AddCommentToContrafact", ReplyAction="http://tempuri.org/IContrafactService/AddCommentToContrafactResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> AddCommentToContrafactAsync(int contrafactId, int userId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/InsertCounterfeitPretension", ReplyAction="http://tempuri.org/IContrafactService/InsertCounterfeitPretensionResponse")]
        EmExServiceClient.ContrafactService.OperationResult InsertCounterfeitPretension(EmExServiceClient.ContrafactService.CounterfeitPretensionData counterfeitPretensionData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/InsertCounterfeitPretension", ReplyAction="http://tempuri.org/IContrafactService/InsertCounterfeitPretensionResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> InsertCounterfeitPretensionAsync(EmExServiceClient.ContrafactService.CounterfeitPretensionData counterfeitPretensionData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetCounterfeitSupplierDataList", ReplyAction="http://tempuri.org/IContrafactService/GetCounterfeitSupplierDataListResponse")]
        EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitSupplierInfo GetCounterfeitSupplierDataList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetCounterfeitSupplierDataList", ReplyAction="http://tempuri.org/IContrafactService/GetCounterfeitSupplierDataListResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitSupplierInfo> GetCounterfeitSupplierDataListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetCounterfeitModelData", ReplyAction="http://tempuri.org/IContrafactService/GetCounterfeitModelDataResponse")]
        EmExServiceClient.ContrafactService.OperationResultCounterfeitModelInfoDetalization GetCounterfeitModelData(int modelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetCounterfeitModelData", ReplyAction="http://tempuri.org/IContrafactService/GetCounterfeitModelDataResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultCounterfeitModelInfoDetalization> GetCounterfeitModelDataAsync(int modelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/AddCounterfeitModelFeatures", ReplyAction="http://tempuri.org/IContrafactService/AddCounterfeitModelFeaturesResponse")]
        EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitModelFeature AddCounterfeitModelFeatures(EmExServiceClient.ContrafactService.CounterfeitModelFeature[] features, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/AddCounterfeitModelFeatures", ReplyAction="http://tempuri.org/IContrafactService/AddCounterfeitModelFeaturesResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitModelFeature> AddCounterfeitModelFeaturesAsync(EmExServiceClient.ContrafactService.CounterfeitModelFeature[] features, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/DeleteCounterfeitModelFeatures", ReplyAction="http://tempuri.org/IContrafactService/DeleteCounterfeitModelFeaturesResponse")]
        EmExServiceClient.ContrafactService.OperationResult DeleteCounterfeitModelFeatures(EmExServiceClient.ContrafactService.CounterfeitModelFeature[] picsToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/DeleteCounterfeitModelFeatures", ReplyAction="http://tempuri.org/IContrafactService/DeleteCounterfeitModelFeaturesResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> DeleteCounterfeitModelFeaturesAsync(EmExServiceClient.ContrafactService.CounterfeitModelFeature[] picsToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/UpdateContrafactModelFeature", ReplyAction="http://tempuri.org/IContrafactService/UpdateContrafactModelFeatureResponse")]
        EmExServiceClient.ContrafactService.OperationResult UpdateContrafactModelFeature(System.Nullable<int> contrafactModelId, System.Nullable<long> imagesFileId, string comment, System.Nullable<decimal> price, System.Nullable<bool> isMain, System.Nullable<long> userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/UpdateContrafactModelFeature", ReplyAction="http://tempuri.org/IContrafactService/UpdateContrafactModelFeatureResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> UpdateContrafactModelFeatureAsync(System.Nullable<int> contrafactModelId, System.Nullable<long> imagesFileId, string comment, System.Nullable<decimal> price, System.Nullable<bool> isMain, System.Nullable<long> userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/AddCommentToContrafactModel", ReplyAction="http://tempuri.org/IContrafactService/AddCommentToContrafactModelResponse")]
        EmExServiceClient.ContrafactService.OperationResult AddCommentToContrafactModel(int modelId, int userId, string commentText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/AddCommentToContrafactModel", ReplyAction="http://tempuri.org/IContrafactService/AddCommentToContrafactModelResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> AddCommentToContrafactModelAsync(int modelId, int userId, string commentText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetCommentsByContrafactModelId", ReplyAction="http://tempuri.org/IContrafactService/GetCommentsByContrafactModelIdResponse")]
        EmExServiceClient.ContrafactService.OperationResultArrayOfContrafactComment GetCommentsByContrafactModelId(int contrafactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetCommentsByContrafactModelId", ReplyAction="http://tempuri.org/IContrafactService/GetCommentsByContrafactModelIdResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultArrayOfContrafactComment> GetCommentsByContrafactModelIdAsync(int contrafactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/SendNotificationToSupplier", ReplyAction="http://tempuri.org/IContrafactService/SendNotificationToSupplierResponse")]
        EmExServiceClient.ContrafactService.OperationResult SendNotificationToSupplier(int expertiseDetailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/SendNotificationToSupplier", ReplyAction="http://tempuri.org/IContrafactService/SendNotificationToSupplierResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> SendNotificationToSupplierAsync(int expertiseDetailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/ChangeModelPlace", ReplyAction="http://tempuri.org/IContrafactService/ChangeModelPlaceResponse")]
        EmExServiceClient.ContrafactService.OperationResult ChangeModelPlace(string[] modelList, string modelPlaceCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/ChangeModelPlace", ReplyAction="http://tempuri.org/IContrafactService/ChangeModelPlaceResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> ChangeModelPlaceAsync(string[] modelList, string modelPlaceCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CreateModel", ReplyAction="http://tempuri.org/IContrafactService/CreateModelResponse")]
        EmExServiceClient.ContrafactService.OperationResultStickerDescription CreateModel(long detailId, int quantity, long userId, string detailNum, string detailNameRus, string makeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CreateModel", ReplyAction="http://tempuri.org/IContrafactService/CreateModelResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultStickerDescription> CreateModelAsync(long detailId, int quantity, long userId, string detailNum, string detailNameRus, string makeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/SendEmailAboutCounterfeitModel", ReplyAction="http://tempuri.org/IContrafactService/SendEmailAboutCounterfeitModelResponse")]
        EmExServiceClient.ContrafactService.OperationResult SendEmailAboutCounterfeitModel(EmExServiceClient.ContrafactService.MessageType messageType, EmExServiceClient.ContrafactService.CounterfeitModelInfo modelInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/SendEmailAboutCounterfeitModel", ReplyAction="http://tempuri.org/IContrafactService/SendEmailAboutCounterfeitModelResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> SendEmailAboutCounterfeitModelAsync(EmExServiceClient.ContrafactService.MessageType messageType, EmExServiceClient.ContrafactService.CounterfeitModelInfo modelInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetModelStickerDescription", ReplyAction="http://tempuri.org/IContrafactService/GetModelStickerDescriptionResponse")]
        EmExServiceClient.ContrafactService.OperationResultStickerDescription GetModelStickerDescription(string code, string detailNum, string detailName, string makeName, System.DateTime createDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetModelStickerDescription", ReplyAction="http://tempuri.org/IContrafactService/GetModelStickerDescriptionResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultStickerDescription> GetModelStickerDescriptionAsync(string code, string detailNum, string detailName, string makeName, System.DateTime createDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetSuppliersFilterValues", ReplyAction="http://tempuri.org/IContrafactService/GetSuppliersFilterValuesResponse")]
        EmExServiceClient.ContrafactService.Supplier[] GetSuppliersFilterValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetSuppliersFilterValues", ReplyAction="http://tempuri.org/IContrafactService/GetSuppliersFilterValuesResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.Supplier[]> GetSuppliersFilterValuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/ProcessDocsExpects", ReplyAction="http://tempuri.org/IContrafactService/ProcessDocsExpectsResponse")]
        EmExServiceClient.ContrafactService.OperationResult ProcessDocsExpects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/ProcessDocsExpects", ReplyAction="http://tempuri.org/IContrafactService/ProcessDocsExpectsResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> ProcessDocsExpectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/UpdateContrafactListOnFtp", ReplyAction="http://tempuri.org/IContrafactService/UpdateContrafactListOnFtpResponse")]
        EmExServiceClient.ContrafactService.OperationResult UpdateContrafactListOnFtp();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/UpdateContrafactListOnFtp", ReplyAction="http://tempuri.org/IContrafactService/UpdateContrafactListOnFtpResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> UpdateContrafactListOnFtpAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CreateContrafactQuestions", ReplyAction="http://tempuri.org/IContrafactService/CreateContrafactQuestionsResponse")]
        EmExServiceClient.ContrafactService.OperationResult CreateContrafactQuestions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CreateContrafactQuestions", ReplyAction="http://tempuri.org/IContrafactService/CreateContrafactQuestionsResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> CreateContrafactQuestionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CreateBuhOperacia", ReplyAction="http://tempuri.org/IContrafactService/CreateBuhOperaciaResponse")]
        EmExServiceClient.ContrafactService.OperationResult CreateBuhOperacia();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CreateBuhOperacia", ReplyAction="http://tempuri.org/IContrafactService/CreateBuhOperaciaResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> CreateBuhOperaciaAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/DeleteArticle", ReplyAction="http://tempuri.org/IContrafactService/DeleteArticleResponse")]
        EmExServiceClient.ContrafactService.OperationResult DeleteArticle(long contrafactGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/DeleteArticle", ReplyAction="http://tempuri.org/IContrafactService/DeleteArticleResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> DeleteArticleAsync(long contrafactGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/SetContrafactAppeal", ReplyAction="http://tempuri.org/IContrafactService/SetContrafactAppealResponse")]
        EmExServiceClient.ContrafactService.OperationResult SetContrafactAppeal(long contrafactGroupId, bool hasAppeal, long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/SetContrafactAppeal", ReplyAction="http://tempuri.org/IContrafactService/SetContrafactAppealResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> SetContrafactAppealAsync(long contrafactGroupId, bool hasAppeal, long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetPossibleCounterfeit", ReplyAction="http://tempuri.org/IContrafactService/GetPossibleCounterfeitResponse")]
        EmExServiceClient.ContrafactService.OperationResultArrayOfPossibleCounterfeitDetail GetPossibleCounterfeit(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] possibleCounterfeitDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/GetPossibleCounterfeit", ReplyAction="http://tempuri.org/IContrafactService/GetPossibleCounterfeitResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultArrayOfPossibleCounterfeitDetail> GetPossibleCounterfeitAsync(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] possibleCounterfeitDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CounterfeitConfirmed", ReplyAction="http://tempuri.org/IContrafactService/CounterfeitConfirmedResponse")]
        EmExServiceClient.ContrafactService.OperationResult CounterfeitConfirmed(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] confirmedCounterfeitDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CounterfeitConfirmed", ReplyAction="http://tempuri.org/IContrafactService/CounterfeitConfirmedResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> CounterfeitConfirmedAsync(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] confirmedCounterfeitDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CounterfeitNotConfirmed", ReplyAction="http://tempuri.org/IContrafactService/CounterfeitNotConfirmedResponse")]
        EmExServiceClient.ContrafactService.OperationResult CounterfeitNotConfirmed(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] confirmedAuthenticDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CounterfeitNotConfirmed", ReplyAction="http://tempuri.org/IContrafactService/CounterfeitNotConfirmedResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> CounterfeitNotConfirmedAsync(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] confirmedAuthenticDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CounterfeitRefunded", ReplyAction="http://tempuri.org/IContrafactService/CounterfeitRefundedResponse")]
        EmExServiceClient.ContrafactService.OperationResult CounterfeitRefunded(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] refundedCounterfeitDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CounterfeitRefunded", ReplyAction="http://tempuri.org/IContrafactService/CounterfeitRefundedResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> CounterfeitRefundedAsync(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] refundedCounterfeitDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CounterfeitProcessed", ReplyAction="http://tempuri.org/IContrafactService/CounterfeitProcessedResponse")]
        EmExServiceClient.ContrafactService.OperationResult CounterfeitProcessed([System.ServiceModel.MessageParameterAttribute(Name="counterfeitProcessed")] EmExServiceClient.ContrafactService.CounterfeitProcessed counterfeitProcessed1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/CounterfeitProcessed", ReplyAction="http://tempuri.org/IContrafactService/CounterfeitProcessedResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> CounterfeitProcessedAsync(EmExServiceClient.ContrafactService.CounterfeitProcessed counterfeitProcessed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/SetDenyForOrders", ReplyAction="http://tempuri.org/IContrafactService/SetDenyForOrdersResponse")]
        EmExServiceClient.ContrafactService.OperationResult SetDenyForOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContrafactService/SetDenyForOrders", ReplyAction="http://tempuri.org/IContrafactService/SetDenyForOrdersResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> SetDenyForOrdersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContrafactServiceChannel : EmExServiceClient.ContrafactService.IContrafactService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContrafactServiceClient : System.ServiceModel.ClientBase<EmExServiceClient.ContrafactService.IContrafactService>, EmExServiceClient.ContrafactService.IContrafactService {
        
        public ContrafactServiceClient() {
        }
        
        public ContrafactServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContrafactServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContrafactServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContrafactServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EmExServiceClient.ContrafactService.OperationResultArrayOfContrafactInfo GetContrafactsDataList(EmExServiceClient.ContrafactService.ContrafactFilter filter) {
            return base.Channel.GetContrafactsDataList(filter);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultArrayOfContrafactInfo> GetContrafactsDataListAsync(EmExServiceClient.ContrafactService.ContrafactFilter filter) {
            return base.Channel.GetContrafactsDataListAsync(filter);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult AddCounterfeitFeatures(EmExServiceClient.ContrafactService.ContrafactFeature[] features, string detailName, int userId, int operatorUserId, bool isPublish) {
            return base.Channel.AddCounterfeitFeatures(features, detailName, userId, operatorUserId, isPublish);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> AddCounterfeitFeaturesAsync(EmExServiceClient.ContrafactService.ContrafactFeature[] features, string detailName, int userId, int operatorUserId, bool isPublish) {
            return base.Channel.AddCounterfeitFeaturesAsync(features, detailName, userId, operatorUserId, isPublish);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult ChangeDetailNaming(EmExServiceClient.ContrafactService.UserAgent userAgent, string detailNum, long detailId, string makeName, string previousDetailNameRus, string newDetailNameRus) {
            return base.Channel.ChangeDetailNaming(userAgent, detailNum, detailId, makeName, previousDetailNameRus, newDetailNameRus);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> ChangeDetailNamingAsync(EmExServiceClient.ContrafactService.UserAgent userAgent, string detailNum, long detailId, string makeName, string previousDetailNameRus, string newDetailNameRus) {
            return base.Channel.ChangeDetailNamingAsync(userAgent, detailNum, detailId, makeName, previousDetailNameRus, newDetailNameRus);
        }
        
        public EmExServiceClient.ContrafactService.OperationResultContrafactInfoDetalization GetCounterfeitsData(int id) {
            return base.Channel.GetCounterfeitsData(id);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultContrafactInfoDetalization> GetCounterfeitsDataAsync(int id) {
            return base.Channel.GetCounterfeitsDataAsync(id);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult ReturnContrafactToWork(int contrafactId) {
            return base.Channel.ReturnContrafactToWork(contrafactId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> ReturnContrafactToWorkAsync(int contrafactId) {
            return base.Channel.ReturnContrafactToWorkAsync(contrafactId);
        }
        
        public EmExServiceClient.ContrafactService.OperationResultWithFiles CreateActContrafact(string contrafactId) {
            return base.Channel.CreateActContrafact(contrafactId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultWithFiles> CreateActContrafactAsync(string contrafactId) {
            return base.Channel.CreateActContrafactAsync(contrafactId);
        }
        
        public EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitModelInfo GetCounterfeitModelsList(EmExServiceClient.ContrafactService.CounterfeitModelFilter filter) {
            return base.Channel.GetCounterfeitModelsList(filter);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitModelInfo> GetCounterfeitModelsListAsync(EmExServiceClient.ContrafactService.CounterfeitModelFilter filter) {
            return base.Channel.GetCounterfeitModelsListAsync(filter);
        }
        
        public EmExServiceClient.ContrafactService.OperationResultArrayOfContrafactComment GetCommentsByContrafactId(int contrafactId) {
            return base.Channel.GetCommentsByContrafactId(contrafactId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultArrayOfContrafactComment> GetCommentsByContrafactIdAsync(int contrafactId) {
            return base.Channel.GetCommentsByContrafactIdAsync(contrafactId);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult AddCommentToContrafact(int contrafactId, int userId, string comment) {
            return base.Channel.AddCommentToContrafact(contrafactId, userId, comment);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> AddCommentToContrafactAsync(int contrafactId, int userId, string comment) {
            return base.Channel.AddCommentToContrafactAsync(contrafactId, userId, comment);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult InsertCounterfeitPretension(EmExServiceClient.ContrafactService.CounterfeitPretensionData counterfeitPretensionData) {
            return base.Channel.InsertCounterfeitPretension(counterfeitPretensionData);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> InsertCounterfeitPretensionAsync(EmExServiceClient.ContrafactService.CounterfeitPretensionData counterfeitPretensionData) {
            return base.Channel.InsertCounterfeitPretensionAsync(counterfeitPretensionData);
        }
        
        public EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitSupplierInfo GetCounterfeitSupplierDataList() {
            return base.Channel.GetCounterfeitSupplierDataList();
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitSupplierInfo> GetCounterfeitSupplierDataListAsync() {
            return base.Channel.GetCounterfeitSupplierDataListAsync();
        }
        
        public EmExServiceClient.ContrafactService.OperationResultCounterfeitModelInfoDetalization GetCounterfeitModelData(int modelId) {
            return base.Channel.GetCounterfeitModelData(modelId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultCounterfeitModelInfoDetalization> GetCounterfeitModelDataAsync(int modelId) {
            return base.Channel.GetCounterfeitModelDataAsync(modelId);
        }
        
        public EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitModelFeature AddCounterfeitModelFeatures(EmExServiceClient.ContrafactService.CounterfeitModelFeature[] features, int userId) {
            return base.Channel.AddCounterfeitModelFeatures(features, userId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultArrayOfCounterfeitModelFeature> AddCounterfeitModelFeaturesAsync(EmExServiceClient.ContrafactService.CounterfeitModelFeature[] features, int userId) {
            return base.Channel.AddCounterfeitModelFeaturesAsync(features, userId);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult DeleteCounterfeitModelFeatures(EmExServiceClient.ContrafactService.CounterfeitModelFeature[] picsToDelete) {
            return base.Channel.DeleteCounterfeitModelFeatures(picsToDelete);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> DeleteCounterfeitModelFeaturesAsync(EmExServiceClient.ContrafactService.CounterfeitModelFeature[] picsToDelete) {
            return base.Channel.DeleteCounterfeitModelFeaturesAsync(picsToDelete);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult UpdateContrafactModelFeature(System.Nullable<int> contrafactModelId, System.Nullable<long> imagesFileId, string comment, System.Nullable<decimal> price, System.Nullable<bool> isMain, System.Nullable<long> userId) {
            return base.Channel.UpdateContrafactModelFeature(contrafactModelId, imagesFileId, comment, price, isMain, userId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> UpdateContrafactModelFeatureAsync(System.Nullable<int> contrafactModelId, System.Nullable<long> imagesFileId, string comment, System.Nullable<decimal> price, System.Nullable<bool> isMain, System.Nullable<long> userId) {
            return base.Channel.UpdateContrafactModelFeatureAsync(contrafactModelId, imagesFileId, comment, price, isMain, userId);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult AddCommentToContrafactModel(int modelId, int userId, string commentText) {
            return base.Channel.AddCommentToContrafactModel(modelId, userId, commentText);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> AddCommentToContrafactModelAsync(int modelId, int userId, string commentText) {
            return base.Channel.AddCommentToContrafactModelAsync(modelId, userId, commentText);
        }
        
        public EmExServiceClient.ContrafactService.OperationResultArrayOfContrafactComment GetCommentsByContrafactModelId(int contrafactId) {
            return base.Channel.GetCommentsByContrafactModelId(contrafactId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultArrayOfContrafactComment> GetCommentsByContrafactModelIdAsync(int contrafactId) {
            return base.Channel.GetCommentsByContrafactModelIdAsync(contrafactId);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult SendNotificationToSupplier(int expertiseDetailId) {
            return base.Channel.SendNotificationToSupplier(expertiseDetailId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> SendNotificationToSupplierAsync(int expertiseDetailId) {
            return base.Channel.SendNotificationToSupplierAsync(expertiseDetailId);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult ChangeModelPlace(string[] modelList, string modelPlaceCode) {
            return base.Channel.ChangeModelPlace(modelList, modelPlaceCode);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> ChangeModelPlaceAsync(string[] modelList, string modelPlaceCode) {
            return base.Channel.ChangeModelPlaceAsync(modelList, modelPlaceCode);
        }
        
        public EmExServiceClient.ContrafactService.OperationResultStickerDescription CreateModel(long detailId, int quantity, long userId, string detailNum, string detailNameRus, string makeName) {
            return base.Channel.CreateModel(detailId, quantity, userId, detailNum, detailNameRus, makeName);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultStickerDescription> CreateModelAsync(long detailId, int quantity, long userId, string detailNum, string detailNameRus, string makeName) {
            return base.Channel.CreateModelAsync(detailId, quantity, userId, detailNum, detailNameRus, makeName);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult SendEmailAboutCounterfeitModel(EmExServiceClient.ContrafactService.MessageType messageType, EmExServiceClient.ContrafactService.CounterfeitModelInfo modelInfo) {
            return base.Channel.SendEmailAboutCounterfeitModel(messageType, modelInfo);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> SendEmailAboutCounterfeitModelAsync(EmExServiceClient.ContrafactService.MessageType messageType, EmExServiceClient.ContrafactService.CounterfeitModelInfo modelInfo) {
            return base.Channel.SendEmailAboutCounterfeitModelAsync(messageType, modelInfo);
        }
        
        public EmExServiceClient.ContrafactService.OperationResultStickerDescription GetModelStickerDescription(string code, string detailNum, string detailName, string makeName, System.DateTime createDateTime) {
            return base.Channel.GetModelStickerDescription(code, detailNum, detailName, makeName, createDateTime);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultStickerDescription> GetModelStickerDescriptionAsync(string code, string detailNum, string detailName, string makeName, System.DateTime createDateTime) {
            return base.Channel.GetModelStickerDescriptionAsync(code, detailNum, detailName, makeName, createDateTime);
        }
        
        public EmExServiceClient.ContrafactService.Supplier[] GetSuppliersFilterValues() {
            return base.Channel.GetSuppliersFilterValues();
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.Supplier[]> GetSuppliersFilterValuesAsync() {
            return base.Channel.GetSuppliersFilterValuesAsync();
        }
        
        public EmExServiceClient.ContrafactService.OperationResult ProcessDocsExpects() {
            return base.Channel.ProcessDocsExpects();
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> ProcessDocsExpectsAsync() {
            return base.Channel.ProcessDocsExpectsAsync();
        }
        
        public EmExServiceClient.ContrafactService.OperationResult UpdateContrafactListOnFtp() {
            return base.Channel.UpdateContrafactListOnFtp();
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> UpdateContrafactListOnFtpAsync() {
            return base.Channel.UpdateContrafactListOnFtpAsync();
        }
        
        public EmExServiceClient.ContrafactService.OperationResult CreateContrafactQuestions() {
            return base.Channel.CreateContrafactQuestions();
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> CreateContrafactQuestionsAsync() {
            return base.Channel.CreateContrafactQuestionsAsync();
        }
        
        public EmExServiceClient.ContrafactService.OperationResult CreateBuhOperacia() {
            return base.Channel.CreateBuhOperacia();
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> CreateBuhOperaciaAsync() {
            return base.Channel.CreateBuhOperaciaAsync();
        }
        
        public EmExServiceClient.ContrafactService.OperationResult DeleteArticle(long contrafactGroupId) {
            return base.Channel.DeleteArticle(contrafactGroupId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> DeleteArticleAsync(long contrafactGroupId) {
            return base.Channel.DeleteArticleAsync(contrafactGroupId);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult SetContrafactAppeal(long contrafactGroupId, bool hasAppeal, long userId) {
            return base.Channel.SetContrafactAppeal(contrafactGroupId, hasAppeal, userId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> SetContrafactAppealAsync(long contrafactGroupId, bool hasAppeal, long userId) {
            return base.Channel.SetContrafactAppealAsync(contrafactGroupId, hasAppeal, userId);
        }
        
        public EmExServiceClient.ContrafactService.OperationResultArrayOfPossibleCounterfeitDetail GetPossibleCounterfeit(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] possibleCounterfeitDetails) {
            return base.Channel.GetPossibleCounterfeit(possibleCounterfeitDetails);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResultArrayOfPossibleCounterfeitDetail> GetPossibleCounterfeitAsync(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] possibleCounterfeitDetails) {
            return base.Channel.GetPossibleCounterfeitAsync(possibleCounterfeitDetails);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult CounterfeitConfirmed(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] confirmedCounterfeitDetails) {
            return base.Channel.CounterfeitConfirmed(confirmedCounterfeitDetails);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> CounterfeitConfirmedAsync(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] confirmedCounterfeitDetails) {
            return base.Channel.CounterfeitConfirmedAsync(confirmedCounterfeitDetails);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult CounterfeitNotConfirmed(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] confirmedAuthenticDetails) {
            return base.Channel.CounterfeitNotConfirmed(confirmedAuthenticDetails);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> CounterfeitNotConfirmedAsync(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] confirmedAuthenticDetails) {
            return base.Channel.CounterfeitNotConfirmedAsync(confirmedAuthenticDetails);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult CounterfeitRefunded(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] refundedCounterfeitDetails) {
            return base.Channel.CounterfeitRefunded(refundedCounterfeitDetails);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> CounterfeitRefundedAsync(EmExServiceClient.ContrafactService.PossibleCounterfeitDetail[] refundedCounterfeitDetails) {
            return base.Channel.CounterfeitRefundedAsync(refundedCounterfeitDetails);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult CounterfeitProcessed(EmExServiceClient.ContrafactService.CounterfeitProcessed counterfeitProcessed1) {
            return base.Channel.CounterfeitProcessed(counterfeitProcessed1);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> CounterfeitProcessedAsync(EmExServiceClient.ContrafactService.CounterfeitProcessed counterfeitProcessed) {
            return base.Channel.CounterfeitProcessedAsync(counterfeitProcessed);
        }
        
        public EmExServiceClient.ContrafactService.OperationResult SetDenyForOrders() {
            return base.Channel.SetDenyForOrders();
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.ContrafactService.OperationResult> SetDenyForOrdersAsync() {
            return base.Channel.SetDenyForOrdersAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ContrafactService.IWmsService")]
    public interface IWmsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/IsAlive", ReplyAction="http://tempuri.org/IWmsService/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/IsAlive", ReplyAction="http://tempuri.org/IWmsService/IsAliveResponse")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetConnectionStrings", ReplyAction="http://tempuri.org/IWmsService/GetConnectionStringsResponse")]
        string[] GetConnectionStrings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetConnectionStrings", ReplyAction="http://tempuri.org/IWmsService/GetConnectionStringsResponse")]
        System.Threading.Tasks.Task<string[]> GetConnectionStringsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetVersions", ReplyAction="http://tempuri.org/IWmsService/GetVersionsResponse")]
        string[] GetVersions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetVersions", ReplyAction="http://tempuri.org/IWmsService/GetVersionsResponse")]
        System.Threading.Tasks.Task<string[]> GetVersionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetEndpoints", ReplyAction="http://tempuri.org/IWmsService/GetEndpointsResponse")]
        string[] GetEndpoints();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetEndpoints", ReplyAction="http://tempuri.org/IWmsService/GetEndpointsResponse")]
        System.Threading.Tasks.Task<string[]> GetEndpointsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetConfiguration", ReplyAction="http://tempuri.org/IWmsService/GetConfigurationResponse")]
        string GetConfiguration();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetConfiguration", ReplyAction="http://tempuri.org/IWmsService/GetConfigurationResponse")]
        System.Threading.Tasks.Task<string> GetConfigurationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/ClearCache", ReplyAction="http://tempuri.org/IWmsService/ClearCacheResponse")]
        void ClearCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/ClearCache", ReplyAction="http://tempuri.org/IWmsService/ClearCacheResponse")]
        System.Threading.Tasks.Task ClearCacheAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetCache", ReplyAction="http://tempuri.org/IWmsService/GetCacheResponse")]
        System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>> GetCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetCache", ReplyAction="http://tempuri.org/IWmsService/GetCacheResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>>> GetCacheAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/SetWcfLogging", ReplyAction="http://tempuri.org/IWmsService/SetWcfLoggingResponse")]
        void SetWcfLogging(string isEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/SetWcfLogging", ReplyAction="http://tempuri.org/IWmsService/SetWcfLoggingResponse")]
        System.Threading.Tasks.Task SetWcfLoggingAsync(string isEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetComment", ReplyAction="http://tempuri.org/IWmsService/GetCommentResponse")]
        string GetComment(string param);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetComment", ReplyAction="http://tempuri.org/IWmsService/GetCommentResponse")]
        System.Threading.Tasks.Task<string> GetCommentAsync(string param);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/IsWorking", ReplyAction="http://tempuri.org/IWmsService/IsWorkingResponse")]
        bool IsWorking();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/IsWorking", ReplyAction="http://tempuri.org/IWmsService/IsWorkingResponse")]
        System.Threading.Tasks.Task<bool> IsWorkingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetCounter", ReplyAction="http://tempuri.org/IWmsService/GetCounterResponse")]
        System.IO.Stream GetCounter(string param);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetCounter", ReplyAction="http://tempuri.org/IWmsService/GetCounterResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetCounterAsync(string param);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetStatus", ReplyAction="http://tempuri.org/IWmsService/GetStatusResponse")]
        System.IO.Stream GetStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetStatus", ReplyAction="http://tempuri.org/IWmsService/GetStatusResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetStatusAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWmsServiceChannel : EmExServiceClient.ContrafactService.IWmsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WmsServiceClient : System.ServiceModel.ClientBase<EmExServiceClient.ContrafactService.IWmsService>, EmExServiceClient.ContrafactService.IWmsService {
        
        public WmsServiceClient() {
        }
        
        public WmsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WmsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WmsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WmsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
        
        public string[] GetConnectionStrings() {
            return base.Channel.GetConnectionStrings();
        }
        
        public System.Threading.Tasks.Task<string[]> GetConnectionStringsAsync() {
            return base.Channel.GetConnectionStringsAsync();
        }
        
        public string[] GetVersions() {
            return base.Channel.GetVersions();
        }
        
        public System.Threading.Tasks.Task<string[]> GetVersionsAsync() {
            return base.Channel.GetVersionsAsync();
        }
        
        public string[] GetEndpoints() {
            return base.Channel.GetEndpoints();
        }
        
        public System.Threading.Tasks.Task<string[]> GetEndpointsAsync() {
            return base.Channel.GetEndpointsAsync();
        }
        
        public string GetConfiguration() {
            return base.Channel.GetConfiguration();
        }
        
        public System.Threading.Tasks.Task<string> GetConfigurationAsync() {
            return base.Channel.GetConfigurationAsync();
        }
        
        public void ClearCache() {
            base.Channel.ClearCache();
        }
        
        public System.Threading.Tasks.Task ClearCacheAsync() {
            return base.Channel.ClearCacheAsync();
        }
        
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>> GetCache() {
            return base.Channel.GetCache();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>>> GetCacheAsync() {
            return base.Channel.GetCacheAsync();
        }
        
        public void SetWcfLogging(string isEnabled) {
            base.Channel.SetWcfLogging(isEnabled);
        }
        
        public System.Threading.Tasks.Task SetWcfLoggingAsync(string isEnabled) {
            return base.Channel.SetWcfLoggingAsync(isEnabled);
        }
        
        public string GetComment(string param) {
            return base.Channel.GetComment(param);
        }
        
        public System.Threading.Tasks.Task<string> GetCommentAsync(string param) {
            return base.Channel.GetCommentAsync(param);
        }
        
        public bool IsWorking() {
            return base.Channel.IsWorking();
        }
        
        public System.Threading.Tasks.Task<bool> IsWorkingAsync() {
            return base.Channel.IsWorkingAsync();
        }
        
        public System.IO.Stream GetCounter(string param) {
            return base.Channel.GetCounter(param);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetCounterAsync(string param) {
            return base.Channel.GetCounterAsync(param);
        }
        
        public System.IO.Stream GetStatus() {
            return base.Channel.GetStatus();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetStatusAsync() {
            return base.Channel.GetStatusAsync();
        }
    }
}
