//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmExServiceClient.DocumentService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthentificationData", Namespace="http://schemas.datacontract.org/2004/07/Emex")]
    [System.SerializableAttribute()]
    public partial class AuthentificationData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPPCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserLogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppName {
            get {
                return this.AppNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AppNameField, value) != true)) {
                    this.AppNameField = value;
                    this.RaisePropertyChanged("AppName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Host {
            get {
                return this.HostField;
            }
            set {
                if ((object.ReferenceEquals(this.HostField, value) != true)) {
                    this.HostField = value;
                    this.RaisePropertyChanged("Host");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPPC {
            get {
                return this.IsPPCField;
            }
            set {
                if ((this.IsPPCField.Equals(value) != true)) {
                    this.IsPPCField = value;
                    this.RaisePropertyChanged("IsPPC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserLogo {
            get {
                return this.UserLogoField;
            }
            set {
                if ((object.ReferenceEquals(this.UserLogoField, value) != true)) {
                    this.UserLogoField = value;
                    this.RaisePropertyChanged("UserLogo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentOptions", Namespace="http://schemas.datacontract.org/2004/07/Emex.Document")]
    public enum DocumentOptions : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Print = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Send = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReturnExcel = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReturnImage = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReturnPDF = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReturnCSV = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Save = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReturnDoc = 64,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResult", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EmExServiceClient.DocumentService.OperationResultSverka))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBankDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBank))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EmExServiceClient.DocumentService.OperationResultWithFiles))]
    public partial class OperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRepeatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRepeat {
            get {
                return this.IsRepeatField;
            }
            set {
                if ((this.IsRepeatField.Equals(value) != true)) {
                    this.IsRepeatField = value;
                    this.RaisePropertyChanged("IsRepeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultSverka", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    public partial class OperationResultSverka : EmExServiceClient.DocumentService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.DocumentService.Sverka OperationObjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.DocumentService.Sverka OperationObject {
            get {
                return this.OperationObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationObjectField, value) != true)) {
                    this.OperationObjectField = value;
                    this.RaisePropertyChanged("OperationObject");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultArrayOfVEDReportToBankDetail", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    public partial class OperationResultArrayOfVEDReportToBankDetail : EmExServiceClient.DocumentService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.DocumentService.VEDReportToBankDetail[] OperationObjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.DocumentService.VEDReportToBankDetail[] OperationObject {
            get {
                return this.OperationObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationObjectField, value) != true)) {
                    this.OperationObjectField = value;
                    this.RaisePropertyChanged("OperationObject");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultArrayOfVEDReportToBank", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    public partial class OperationResultArrayOfVEDReportToBank : EmExServiceClient.DocumentService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.DocumentService.VEDReportToBank[] OperationObjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.DocumentService.VEDReportToBank[] OperationObject {
            get {
                return this.OperationObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationObjectField, value) != true)) {
                    this.OperationObjectField = value;
                    this.RaisePropertyChanged("OperationObject");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultWithFiles", Namespace="http://schemas.datacontract.org/2004/07/Emex.Communication")]
    [System.SerializableAttribute()]
    public partial class OperationResultWithFiles : EmExServiceClient.DocumentService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.DocumentService.FileDescription[] FilesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.DocumentService.FileDescription[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileDescription", Namespace="http://schemas.datacontract.org/2004/07/Emex.IO")]
    [System.SerializableAttribute()]
    public partial class FileDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[][] ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.DocumentService.FileType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[][] Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.DocumentService.FileType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Sverka", Namespace="http://schemas.datacontract.org/2004/07/Emex.Dispatch")]
    [System.SerializableAttribute()]
    public partial class Sverka : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CreditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DebetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.DocumentService.FileDescription[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SaldoBeginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SaldoEndField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Credit {
            get {
                return this.CreditField;
            }
            set {
                if ((this.CreditField.Equals(value) != true)) {
                    this.CreditField = value;
                    this.RaisePropertyChanged("Credit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Debet {
            get {
                return this.DebetField;
            }
            set {
                if ((this.DebetField.Equals(value) != true)) {
                    this.DebetField = value;
                    this.RaisePropertyChanged("Debet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.DocumentService.FileDescription[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SaldoBegin {
            get {
                return this.SaldoBeginField;
            }
            set {
                if ((this.SaldoBeginField.Equals(value) != true)) {
                    this.SaldoBeginField = value;
                    this.RaisePropertyChanged("SaldoBegin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SaldoEnd {
            get {
                return this.SaldoEndField;
            }
            set {
                if ((this.SaldoEndField.Equals(value) != true)) {
                    this.SaldoEndField = value;
                    this.RaisePropertyChanged("SaldoEnd");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileType", Namespace="http://schemas.datacontract.org/2004/07/Emex.IO")]
    public enum FileType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Excel = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Word = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EMF = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PDF = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CSV = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ZIP = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VEDReportToBankDetail", Namespace="http://schemas.datacontract.org/2004/07/Emex.Document")]
    [System.SerializableAttribute()]
    public partial struct VEDReportToBankDetail : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> CMRSumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ConfirmingDocumentDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfirmingDocumentNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> ConfirmingDocumentSumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfirmingDocumentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short CurrencyCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short PriznakPostavkiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SourceDocumentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StringNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.DocumentService.VEDReportToBankDetailDescription[] VEDReportToBankDetailDescriptionsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> CMRSum {
            get {
                return this.CMRSumField;
            }
            set {
                if ((this.CMRSumField.Equals(value) != true)) {
                    this.CMRSumField = value;
                    this.RaisePropertyChanged("CMRSum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ConfirmingDocumentDate {
            get {
                return this.ConfirmingDocumentDateField;
            }
            set {
                if ((this.ConfirmingDocumentDateField.Equals(value) != true)) {
                    this.ConfirmingDocumentDateField = value;
                    this.RaisePropertyChanged("ConfirmingDocumentDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConfirmingDocumentNumber {
            get {
                return this.ConfirmingDocumentNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfirmingDocumentNumberField, value) != true)) {
                    this.ConfirmingDocumentNumberField = value;
                    this.RaisePropertyChanged("ConfirmingDocumentNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ConfirmingDocumentSum {
            get {
                return this.ConfirmingDocumentSumField;
            }
            set {
                if ((this.ConfirmingDocumentSumField.Equals(value) != true)) {
                    this.ConfirmingDocumentSumField = value;
                    this.RaisePropertyChanged("ConfirmingDocumentSum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConfirmingDocumentType {
            get {
                return this.ConfirmingDocumentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfirmingDocumentTypeField, value) != true)) {
                    this.ConfirmingDocumentTypeField = value;
                    this.RaisePropertyChanged("ConfirmingDocumentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCode {
            get {
                return this.CountryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryCodeField, value) != true)) {
                    this.CountryCodeField = value;
                    this.RaisePropertyChanged("CountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short CurrencyCode {
            get {
                return this.CurrencyCodeField;
            }
            set {
                if ((this.CurrencyCodeField.Equals(value) != true)) {
                    this.CurrencyCodeField = value;
                    this.RaisePropertyChanged("CurrencyCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short PriznakPostavki {
            get {
                return this.PriznakPostavkiField;
            }
            set {
                if ((this.PriznakPostavkiField.Equals(value) != true)) {
                    this.PriznakPostavkiField = value;
                    this.RaisePropertyChanged("PriznakPostavki");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SourceDocumentID {
            get {
                return this.SourceDocumentIDField;
            }
            set {
                if ((this.SourceDocumentIDField.Equals(value) != true)) {
                    this.SourceDocumentIDField = value;
                    this.RaisePropertyChanged("SourceDocumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StringNumber {
            get {
                return this.StringNumberField;
            }
            set {
                if ((this.StringNumberField.Equals(value) != true)) {
                    this.StringNumberField = value;
                    this.RaisePropertyChanged("StringNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.DocumentService.VEDReportToBankDetailDescription[] VEDReportToBankDetailDescriptions {
            get {
                return this.VEDReportToBankDetailDescriptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.VEDReportToBankDetailDescriptionsField, value) != true)) {
                    this.VEDReportToBankDetailDescriptionsField = value;
                    this.RaisePropertyChanged("VEDReportToBankDetailDescriptions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VEDReportToBankDetailDescription", Namespace="http://schemas.datacontract.org/2004/07/Emex.Document")]
    [System.SerializableAttribute()]
    public partial struct VEDReportToBankDetailDescription : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VEDReportToBank", Namespace="http://schemas.datacontract.org/2004/07/Emex.Document")]
    [System.SerializableAttribute()]
    public partial class VEDReportToBank : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BankNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContragentCountryCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateDocumentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DocumentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirmNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassportDealField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnderlyingDocumentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.DocumentService.VEDReportToBankDetail[] VEDReportDetailField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BankName {
            get {
                return this.BankNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BankNameField, value) != true)) {
                    this.BankNameField = value;
                    this.RaisePropertyChanged("BankName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContragentCountryCode {
            get {
                return this.ContragentCountryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ContragentCountryCodeField, value) != true)) {
                    this.ContragentCountryCodeField = value;
                    this.RaisePropertyChanged("ContragentCountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateDocument {
            get {
                return this.DateDocumentField;
            }
            set {
                if ((this.DateDocumentField.Equals(value) != true)) {
                    this.DateDocumentField = value;
                    this.RaisePropertyChanged("DateDocument");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DocumentId {
            get {
                return this.DocumentIdField;
            }
            set {
                if ((this.DocumentIdField.Equals(value) != true)) {
                    this.DocumentIdField = value;
                    this.RaisePropertyChanged("DocumentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirmName {
            get {
                return this.FirmNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirmNameField, value) != true)) {
                    this.FirmNameField = value;
                    this.RaisePropertyChanged("FirmName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PassportDeal {
            get {
                return this.PassportDealField;
            }
            set {
                if ((object.ReferenceEquals(this.PassportDealField, value) != true)) {
                    this.PassportDealField = value;
                    this.RaisePropertyChanged("PassportDeal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnderlyingDocumentType {
            get {
                return this.UnderlyingDocumentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.UnderlyingDocumentTypeField, value) != true)) {
                    this.UnderlyingDocumentTypeField = value;
                    this.RaisePropertyChanged("UnderlyingDocumentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.DocumentService.VEDReportToBankDetail[] VEDReportDetail {
            get {
                return this.VEDReportDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.VEDReportDetailField, value) != true)) {
                    this.VEDReportDetailField = value;
                    this.RaisePropertyChanged("VEDReportDetail");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriceList", Namespace="http://schemas.datacontract.org/2004/07/Emex.Document")]
    [System.SerializableAttribute()]
    public partial class PriceList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BuyPriceRURField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNameCustField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNameRusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MakeLogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MakeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal BuyPriceRUR {
            get {
                return this.BuyPriceRURField;
            }
            set {
                if ((this.BuyPriceRURField.Equals(value) != true)) {
                    this.BuyPriceRURField = value;
                    this.RaisePropertyChanged("BuyPriceRUR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailNameCust {
            get {
                return this.DetailNameCustField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNameCustField, value) != true)) {
                    this.DetailNameCustField = value;
                    this.RaisePropertyChanged("DetailNameCust");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailNameRus {
            get {
                return this.DetailNameRusField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNameRusField, value) != true)) {
                    this.DetailNameRusField = value;
                    this.RaisePropertyChanged("DetailNameRus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailNum {
            get {
                return this.DetailNumField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNumField, value) != true)) {
                    this.DetailNumField = value;
                    this.RaisePropertyChanged("DetailNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MakeLogo {
            get {
                return this.MakeLogoField;
            }
            set {
                if ((object.ReferenceEquals(this.MakeLogoField, value) != true)) {
                    this.MakeLogoField = value;
                    this.RaisePropertyChanged("MakeLogo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MakeName {
            get {
                return this.MakeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MakeNameField, value) != true)) {
                    this.MakeNameField = value;
                    this.RaisePropertyChanged("MakeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserMailing", Namespace="http://schemas.datacontract.org/2004/07/Emex.Document")]
    [System.SerializableAttribute()]
    public partial class UserMailing : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttachmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long CustomerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SendLetterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Attachment {
            get {
                return this.AttachmentField;
            }
            set {
                if ((object.ReferenceEquals(this.AttachmentField, value) != true)) {
                    this.AttachmentField = value;
                    this.RaisePropertyChanged("Attachment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Body {
            get {
                return this.BodyField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyField, value) != true)) {
                    this.BodyField = value;
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((this.CustomerIdField.Equals(value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string From {
            get {
                return this.FromField;
            }
            set {
                if ((object.ReferenceEquals(this.FromField, value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SS {
            get {
                return this.SSField;
            }
            set {
                if ((object.ReferenceEquals(this.SSField, value) != true)) {
                    this.SSField = value;
                    this.RaisePropertyChanged("SS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SendLetter {
            get {
                return this.SendLetterField;
            }
            set {
                if ((this.SendLetterField.Equals(value) != true)) {
                    this.SendLetterField = value;
                    this.RaisePropertyChanged("SendLetter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string To {
            get {
                return this.ToField;
            }
            set {
                if ((object.ReferenceEquals(this.ToField, value) != true)) {
                    this.ToField = value;
                    this.RaisePropertyChanged("To");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContragentDebtNotification", Namespace="http://schemas.datacontract.org/2004/07/Emex.ContragentDebt")]
    [System.SerializableAttribute()]
    public partial class ContragentDebtNotification : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ClaimDebtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ClaimReviseDateBegField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ClaimReviseDateEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContragentINNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ContragentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContragentNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMailBccField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMailFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMailToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicOfferField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StatusDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierLogoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActionType {
            get {
                return this.ActionTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionTypeField, value) != true)) {
                    this.ActionTypeField = value;
                    this.RaisePropertyChanged("ActionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Body {
            get {
                return this.BodyField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyField, value) != true)) {
                    this.BodyField = value;
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ClaimDebt {
            get {
                return this.ClaimDebtField;
            }
            set {
                if ((this.ClaimDebtField.Equals(value) != true)) {
                    this.ClaimDebtField = value;
                    this.RaisePropertyChanged("ClaimDebt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ClaimReviseDateBeg {
            get {
                return this.ClaimReviseDateBegField;
            }
            set {
                if ((this.ClaimReviseDateBegField.Equals(value) != true)) {
                    this.ClaimReviseDateBegField = value;
                    this.RaisePropertyChanged("ClaimReviseDateBeg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ClaimReviseDateEnd {
            get {
                return this.ClaimReviseDateEndField;
            }
            set {
                if ((this.ClaimReviseDateEndField.Equals(value) != true)) {
                    this.ClaimReviseDateEndField = value;
                    this.RaisePropertyChanged("ClaimReviseDateEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContragentINN {
            get {
                return this.ContragentINNField;
            }
            set {
                if ((object.ReferenceEquals(this.ContragentINNField, value) != true)) {
                    this.ContragentINNField = value;
                    this.RaisePropertyChanged("ContragentINN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ContragentId {
            get {
                return this.ContragentIdField;
            }
            set {
                if ((this.ContragentIdField.Equals(value) != true)) {
                    this.ContragentIdField = value;
                    this.RaisePropertyChanged("ContragentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContragentName {
            get {
                return this.ContragentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ContragentNameField, value) != true)) {
                    this.ContragentNameField = value;
                    this.RaisePropertyChanged("ContragentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMailBcc {
            get {
                return this.EMailBccField;
            }
            set {
                if ((object.ReferenceEquals(this.EMailBccField, value) != true)) {
                    this.EMailBccField = value;
                    this.RaisePropertyChanged("EMailBcc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMailFrom {
            get {
                return this.EMailFromField;
            }
            set {
                if ((object.ReferenceEquals(this.EMailFromField, value) != true)) {
                    this.EMailFromField = value;
                    this.RaisePropertyChanged("EMailFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMailTo {
            get {
                return this.EMailToField;
            }
            set {
                if ((object.ReferenceEquals(this.EMailToField, value) != true)) {
                    this.EMailToField = value;
                    this.RaisePropertyChanged("EMailTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PublicOffer {
            get {
                return this.PublicOfferField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicOfferField, value) != true)) {
                    this.PublicOfferField = value;
                    this.RaisePropertyChanged("PublicOffer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StatusDate {
            get {
                return this.StatusDateField;
            }
            set {
                if ((this.StatusDateField.Equals(value) != true)) {
                    this.StatusDateField = value;
                    this.RaisePropertyChanged("StatusDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName {
            get {
                return this.StatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusNameField, value) != true)) {
                    this.StatusNameField = value;
                    this.RaisePropertyChanged("StatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subj {
            get {
                return this.SubjField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjField, value) != true)) {
                    this.SubjField = value;
                    this.RaisePropertyChanged("Subj");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierLogo {
            get {
                return this.SupplierLogoField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierLogoField, value) != true)) {
                    this.SupplierLogoField = value;
                    this.RaisePropertyChanged("SupplierLogo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvoiceTypeOneHeader", Namespace="http://schemas.datacontract.org/2004/07/Emex.Document")]
    [System.SerializableAttribute()]
    public partial class InvoiceTypeOneHeader : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountCustNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime AccountDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long AccountIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BuyerAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BuyerINNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BuyerKPPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BuyerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConsigneeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConsignerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContractField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerLogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime Invoice2DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Invoice2NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InvoiceTypeOneIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SellerAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SellerINNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SellerKPPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SellerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int bitKazahField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] timestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountCustNumber {
            get {
                return this.AccountCustNumberField;
            }
            set {
                if ((this.AccountCustNumberField.Equals(value) != true)) {
                    this.AccountCustNumberField = value;
                    this.RaisePropertyChanged("AccountCustNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime AccountDate {
            get {
                return this.AccountDateField;
            }
            set {
                if ((this.AccountDateField.Equals(value) != true)) {
                    this.AccountDateField = value;
                    this.RaisePropertyChanged("AccountDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long AccountId {
            get {
                return this.AccountIdField;
            }
            set {
                if ((this.AccountIdField.Equals(value) != true)) {
                    this.AccountIdField = value;
                    this.RaisePropertyChanged("AccountId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountNumber {
            get {
                return this.AccountNumberField;
            }
            set {
                if ((this.AccountNumberField.Equals(value) != true)) {
                    this.AccountNumberField = value;
                    this.RaisePropertyChanged("AccountNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BuyerAddress {
            get {
                return this.BuyerAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.BuyerAddressField, value) != true)) {
                    this.BuyerAddressField = value;
                    this.RaisePropertyChanged("BuyerAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BuyerINN {
            get {
                return this.BuyerINNField;
            }
            set {
                if ((object.ReferenceEquals(this.BuyerINNField, value) != true)) {
                    this.BuyerINNField = value;
                    this.RaisePropertyChanged("BuyerINN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BuyerKPP {
            get {
                return this.BuyerKPPField;
            }
            set {
                if ((object.ReferenceEquals(this.BuyerKPPField, value) != true)) {
                    this.BuyerKPPField = value;
                    this.RaisePropertyChanged("BuyerKPP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BuyerName {
            get {
                return this.BuyerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BuyerNameField, value) != true)) {
                    this.BuyerNameField = value;
                    this.RaisePropertyChanged("BuyerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Consignee {
            get {
                return this.ConsigneeField;
            }
            set {
                if ((object.ReferenceEquals(this.ConsigneeField, value) != true)) {
                    this.ConsigneeField = value;
                    this.RaisePropertyChanged("Consignee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Consigner {
            get {
                return this.ConsignerField;
            }
            set {
                if ((object.ReferenceEquals(this.ConsignerField, value) != true)) {
                    this.ConsignerField = value;
                    this.RaisePropertyChanged("Consigner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contract {
            get {
                return this.ContractField;
            }
            set {
                if ((object.ReferenceEquals(this.ContractField, value) != true)) {
                    this.ContractField = value;
                    this.RaisePropertyChanged("Contract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Currency {
            get {
                return this.CurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyField, value) != true)) {
                    this.CurrencyField = value;
                    this.RaisePropertyChanged("Currency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerCity {
            get {
                return this.CustomerCityField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerCityField, value) != true)) {
                    this.CustomerCityField = value;
                    this.RaisePropertyChanged("CustomerCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerLogo {
            get {
                return this.CustomerLogoField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerLogoField, value) != true)) {
                    this.CustomerLogoField = value;
                    this.RaisePropertyChanged("CustomerLogo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Invoice2Date {
            get {
                return this.Invoice2DateField;
            }
            set {
                if ((this.Invoice2DateField.Equals(value) != true)) {
                    this.Invoice2DateField = value;
                    this.RaisePropertyChanged("Invoice2Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Invoice2Number {
            get {
                return this.Invoice2NumberField;
            }
            set {
                if ((this.Invoice2NumberField.Equals(value) != true)) {
                    this.Invoice2NumberField = value;
                    this.RaisePropertyChanged("Invoice2Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InvoiceTypeOneId {
            get {
                return this.InvoiceTypeOneIdField;
            }
            set {
                if ((this.InvoiceTypeOneIdField.Equals(value) != true)) {
                    this.InvoiceTypeOneIdField = value;
                    this.RaisePropertyChanged("InvoiceTypeOneId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Number {
            get {
                return this.NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberField, value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SellerAddress {
            get {
                return this.SellerAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.SellerAddressField, value) != true)) {
                    this.SellerAddressField = value;
                    this.RaisePropertyChanged("SellerAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SellerINN {
            get {
                return this.SellerINNField;
            }
            set {
                if ((object.ReferenceEquals(this.SellerINNField, value) != true)) {
                    this.SellerINNField = value;
                    this.RaisePropertyChanged("SellerINN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SellerKPP {
            get {
                return this.SellerKPPField;
            }
            set {
                if ((object.ReferenceEquals(this.SellerKPPField, value) != true)) {
                    this.SellerKPPField = value;
                    this.RaisePropertyChanged("SellerKPP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SellerName {
            get {
                return this.SellerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SellerNameField, value) != true)) {
                    this.SellerNameField = value;
                    this.RaisePropertyChanged("SellerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int bitKazah {
            get {
                return this.bitKazahField;
            }
            set {
                if ((this.bitKazahField.Equals(value) != true)) {
                    this.bitKazahField = value;
                    this.RaisePropertyChanged("bitKazah");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] timestamp {
            get {
                return this.timestampField;
            }
            set {
                if ((object.ReferenceEquals(this.timestampField, value) != true)) {
                    this.timestampField = value;
                    this.RaisePropertyChanged("timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvoiceTypeOneDetail", Namespace="http://schemas.datacontract.org/2004/07/Emex.Document")]
    [System.SerializableAttribute()]
    public partial class InvoiceTypeOneDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long AccountsDetailIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BarcodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BarcodeDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BoxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long CodeTNVEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContainerBarcodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContainerCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DenyDetailCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short DetailQuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DetailVolumeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DetailWeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GTDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long GlobalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short HoursOfWaitingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InvoiceTypeOneDetailIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InvoiceTypeOneIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LocationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MakeLogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MakeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> OnlineUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OnlineUserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short PaidHoursOfStorageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short PositionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriceLogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PricePotrebitelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceRURField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceStorageRURField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceStorageSumRURField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceSumRURField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriceWithoutTaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PriorOrderDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubstDetailNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubstMakeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SumOfExciseTaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SumOfTaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SumWithoutTaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaxRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitNameCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int bitKazahField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long AccountsDetailId {
            get {
                return this.AccountsDetailIdField;
            }
            set {
                if ((this.AccountsDetailIdField.Equals(value) != true)) {
                    this.AccountsDetailIdField = value;
                    this.RaisePropertyChanged("AccountsDetailId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Barcode {
            get {
                return this.BarcodeField;
            }
            set {
                if ((object.ReferenceEquals(this.BarcodeField, value) != true)) {
                    this.BarcodeField = value;
                    this.RaisePropertyChanged("Barcode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BarcodeData {
            get {
                return this.BarcodeDataField;
            }
            set {
                if ((object.ReferenceEquals(this.BarcodeDataField, value) != true)) {
                    this.BarcodeDataField = value;
                    this.RaisePropertyChanged("BarcodeData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Box {
            get {
                return this.BoxField;
            }
            set {
                if ((object.ReferenceEquals(this.BoxField, value) != true)) {
                    this.BoxField = value;
                    this.RaisePropertyChanged("Box");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long CodeTNVED {
            get {
                return this.CodeTNVEDField;
            }
            set {
                if ((this.CodeTNVEDField.Equals(value) != true)) {
                    this.CodeTNVEDField = value;
                    this.RaisePropertyChanged("CodeTNVED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContainerBarcode {
            get {
                return this.ContainerBarcodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ContainerBarcodeField, value) != true)) {
                    this.ContainerBarcodeField = value;
                    this.RaisePropertyChanged("ContainerBarcode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContainerCode {
            get {
                return this.ContainerCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ContainerCodeField, value) != true)) {
                    this.ContainerCodeField = value;
                    this.RaisePropertyChanged("ContainerCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCode {
            get {
                return this.CountryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryCodeField, value) != true)) {
                    this.CountryCodeField = value;
                    this.RaisePropertyChanged("CountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DenyDetailComment {
            get {
                return this.DenyDetailCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.DenyDetailCommentField, value) != true)) {
                    this.DenyDetailCommentField = value;
                    this.RaisePropertyChanged("DenyDetailComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailName {
            get {
                return this.DetailNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNameField, value) != true)) {
                    this.DetailNameField = value;
                    this.RaisePropertyChanged("DetailName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailNum {
            get {
                return this.DetailNumField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailNumField, value) != true)) {
                    this.DetailNumField = value;
                    this.RaisePropertyChanged("DetailNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short DetailQuantity {
            get {
                return this.DetailQuantityField;
            }
            set {
                if ((this.DetailQuantityField.Equals(value) != true)) {
                    this.DetailQuantityField = value;
                    this.RaisePropertyChanged("DetailQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DetailVolume {
            get {
                return this.DetailVolumeField;
            }
            set {
                if ((this.DetailVolumeField.Equals(value) != true)) {
                    this.DetailVolumeField = value;
                    this.RaisePropertyChanged("DetailVolume");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DetailWeight {
            get {
                return this.DetailWeightField;
            }
            set {
                if ((this.DetailWeightField.Equals(value) != true)) {
                    this.DetailWeightField = value;
                    this.RaisePropertyChanged("DetailWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GTD {
            get {
                return this.GTDField;
            }
            set {
                if ((object.ReferenceEquals(this.GTDField, value) != true)) {
                    this.GTDField = value;
                    this.RaisePropertyChanged("GTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long GlobalId {
            get {
                return this.GlobalIdField;
            }
            set {
                if ((this.GlobalIdField.Equals(value) != true)) {
                    this.GlobalIdField = value;
                    this.RaisePropertyChanged("GlobalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short HoursOfWaiting {
            get {
                return this.HoursOfWaitingField;
            }
            set {
                if ((this.HoursOfWaitingField.Equals(value) != true)) {
                    this.HoursOfWaitingField = value;
                    this.RaisePropertyChanged("HoursOfWaiting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InvoiceTypeOneDetailId {
            get {
                return this.InvoiceTypeOneDetailIdField;
            }
            set {
                if ((this.InvoiceTypeOneDetailIdField.Equals(value) != true)) {
                    this.InvoiceTypeOneDetailIdField = value;
                    this.RaisePropertyChanged("InvoiceTypeOneDetailId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InvoiceTypeOneId {
            get {
                return this.InvoiceTypeOneIdField;
            }
            set {
                if ((this.InvoiceTypeOneIdField.Equals(value) != true)) {
                    this.InvoiceTypeOneIdField = value;
                    this.RaisePropertyChanged("InvoiceTypeOneId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocationId {
            get {
                return this.LocationIdField;
            }
            set {
                if ((this.LocationIdField.Equals(value) != true)) {
                    this.LocationIdField = value;
                    this.RaisePropertyChanged("LocationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MakeLogo {
            get {
                return this.MakeLogoField;
            }
            set {
                if ((object.ReferenceEquals(this.MakeLogoField, value) != true)) {
                    this.MakeLogoField = value;
                    this.RaisePropertyChanged("MakeLogo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MakeName {
            get {
                return this.MakeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MakeNameField, value) != true)) {
                    this.MakeNameField = value;
                    this.RaisePropertyChanged("MakeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> OnlineUserId {
            get {
                return this.OnlineUserIdField;
            }
            set {
                if ((this.OnlineUserIdField.Equals(value) != true)) {
                    this.OnlineUserIdField = value;
                    this.RaisePropertyChanged("OnlineUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OnlineUserName {
            get {
                return this.OnlineUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OnlineUserNameField, value) != true)) {
                    this.OnlineUserNameField = value;
                    this.RaisePropertyChanged("OnlineUserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short PaidHoursOfStorage {
            get {
                return this.PaidHoursOfStorageField;
            }
            set {
                if ((this.PaidHoursOfStorageField.Equals(value) != true)) {
                    this.PaidHoursOfStorageField = value;
                    this.RaisePropertyChanged("PaidHoursOfStorage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short PositionNumber {
            get {
                return this.PositionNumberField;
            }
            set {
                if ((this.PositionNumberField.Equals(value) != true)) {
                    this.PositionNumberField = value;
                    this.RaisePropertyChanged("PositionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriceLogo {
            get {
                return this.PriceLogoField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceLogoField, value) != true)) {
                    this.PriceLogoField = value;
                    this.RaisePropertyChanged("PriceLogo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PricePotrebitel {
            get {
                return this.PricePotrebitelField;
            }
            set {
                if ((this.PricePotrebitelField.Equals(value) != true)) {
                    this.PricePotrebitelField = value;
                    this.RaisePropertyChanged("PricePotrebitel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PriceRUR {
            get {
                return this.PriceRURField;
            }
            set {
                if ((this.PriceRURField.Equals(value) != true)) {
                    this.PriceRURField = value;
                    this.RaisePropertyChanged("PriceRUR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PriceStorageRUR {
            get {
                return this.PriceStorageRURField;
            }
            set {
                if ((this.PriceStorageRURField.Equals(value) != true)) {
                    this.PriceStorageRURField = value;
                    this.RaisePropertyChanged("PriceStorageRUR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PriceStorageSumRUR {
            get {
                return this.PriceStorageSumRURField;
            }
            set {
                if ((this.PriceStorageSumRURField.Equals(value) != true)) {
                    this.PriceStorageSumRURField = value;
                    this.RaisePropertyChanged("PriceStorageSumRUR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PriceSumRUR {
            get {
                return this.PriceSumRURField;
            }
            set {
                if ((this.PriceSumRURField.Equals(value) != true)) {
                    this.PriceSumRURField = value;
                    this.RaisePropertyChanged("PriceSumRUR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriceWithoutTax {
            get {
                return this.PriceWithoutTaxField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceWithoutTaxField, value) != true)) {
                    this.PriceWithoutTaxField = value;
                    this.RaisePropertyChanged("PriceWithoutTax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriorComment {
            get {
                return this.PriorCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorCommentField, value) != true)) {
                    this.PriorCommentField = value;
                    this.RaisePropertyChanged("PriorComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PriorOrderDate {
            get {
                return this.PriorOrderDateField;
            }
            set {
                if ((this.PriorOrderDateField.Equals(value) != true)) {
                    this.PriorOrderDateField = value;
                    this.RaisePropertyChanged("PriorOrderDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reference {
            get {
                return this.ReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferenceField, value) != true)) {
                    this.ReferenceField = value;
                    this.RaisePropertyChanged("Reference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubstDetailNum {
            get {
                return this.SubstDetailNumField;
            }
            set {
                if ((object.ReferenceEquals(this.SubstDetailNumField, value) != true)) {
                    this.SubstDetailNumField = value;
                    this.RaisePropertyChanged("SubstDetailNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubstMakeName {
            get {
                return this.SubstMakeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubstMakeNameField, value) != true)) {
                    this.SubstMakeNameField = value;
                    this.RaisePropertyChanged("SubstMakeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SumOfExciseTax {
            get {
                return this.SumOfExciseTaxField;
            }
            set {
                if ((object.ReferenceEquals(this.SumOfExciseTaxField, value) != true)) {
                    this.SumOfExciseTaxField = value;
                    this.RaisePropertyChanged("SumOfExciseTax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SumOfTax {
            get {
                return this.SumOfTaxField;
            }
            set {
                if ((this.SumOfTaxField.Equals(value) != true)) {
                    this.SumOfTaxField = value;
                    this.RaisePropertyChanged("SumOfTax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SumWithoutTax {
            get {
                return this.SumWithoutTaxField;
            }
            set {
                if ((this.SumWithoutTaxField.Equals(value) != true)) {
                    this.SumWithoutTaxField = value;
                    this.RaisePropertyChanged("SumWithoutTax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaxRate {
            get {
                return this.TaxRateField;
            }
            set {
                if ((object.ReferenceEquals(this.TaxRateField, value) != true)) {
                    this.TaxRateField = value;
                    this.RaisePropertyChanged("TaxRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnitName {
            get {
                return this.UnitNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitNameField, value) != true)) {
                    this.UnitNameField = value;
                    this.RaisePropertyChanged("UnitName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnitNameCode {
            get {
                return this.UnitNameCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitNameCodeField, value) != true)) {
                    this.UnitNameCodeField = value;
                    this.RaisePropertyChanged("UnitNameCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int bitKazah {
            get {
                return this.bitKazahField;
            }
            set {
                if ((this.bitKazahField.Equals(value) != true)) {
                    this.bitKazahField = value;
                    this.RaisePropertyChanged("bitKazah");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentType", Namespace="http://schemas.datacontract.org/2004/07/Emex.Document")]
    public enum DocumentType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Torg12 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Invoice = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoiceTypeOne = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CustomerBarcodeFile = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PackSheet = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Statement = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        M11DemandBill = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Torg12WithGrouping = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TTN = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TORG2 = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ActSurplusTORG2 = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        M15 = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InfoLost = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CMR = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InsuranceRequest = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RegionPackSheet = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BuhAccountPlan = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Torg12Return = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Upd = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpdReturn = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ukd = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Counterfeit = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ksf = 42,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Util_2_1 = 49,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Util_2_2 = 50,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Util_2_3 = 51,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Util_2_4 = 52,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Util_2_5 = 53,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Util_2_6 = 54,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Util_2_7 = 55,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Util_2_8 = 56,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Util_2_9 = 57,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Util_2_10 = 58,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InventoryList = 59,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InventoryOrder = 60,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InventoryRegister = 61,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InventoryCollationStatement = 62,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InventoryResultDirective = 63,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DueDiligence = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SupplierReturnsRegister = 65,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentReasonType", Namespace="http://schemas.datacontract.org/2004/07/Emex.Document")]
    public enum DocumentReasonType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Account = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoiceClose = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ClientReturn = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CMRShipping = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoName = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WMSCloseCollect = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WMSCloseShipping = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoicesSFProcessingPayment = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LocalStorageAccount = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SupplierPenalty = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SupplierReturn = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReturnFromCustomer = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BarcodeProcessingPayment = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvoicesSFOnlineClientPayment = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        JointProcessingPayment = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OF8WebService = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProtectionFromReturnPayment = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SupplierReturnSale = 32,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SupplyViolationPenalty", Namespace="Emex.Document")]
    [System.SerializableAttribute()]
    public partial class SupplyViolationPenalty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BuhOperaciaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] EmailToSendField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] EmexManagerEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PenaltyDelaySumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PenaltyRefuseSumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierLogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SupplierPenaltyIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BuhOperacia {
            get {
                return this.BuhOperaciaField;
            }
            set {
                if ((this.BuhOperaciaField.Equals(value) != true)) {
                    this.BuhOperaciaField = value;
                    this.RaisePropertyChanged("BuhOperacia");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] EmailToSend {
            get {
                return this.EmailToSendField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailToSendField, value) != true)) {
                    this.EmailToSendField = value;
                    this.RaisePropertyChanged("EmailToSend");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] EmexManagerEmail {
            get {
                return this.EmexManagerEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmexManagerEmailField, value) != true)) {
                    this.EmexManagerEmailField = value;
                    this.RaisePropertyChanged("EmexManagerEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PenaltyDelaySum {
            get {
                return this.PenaltyDelaySumField;
            }
            set {
                if ((this.PenaltyDelaySumField.Equals(value) != true)) {
                    this.PenaltyDelaySumField = value;
                    this.RaisePropertyChanged("PenaltyDelaySum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PenaltyRefuseSum {
            get {
                return this.PenaltyRefuseSumField;
            }
            set {
                if ((this.PenaltyRefuseSumField.Equals(value) != true)) {
                    this.PenaltyRefuseSumField = value;
                    this.RaisePropertyChanged("PenaltyRefuseSum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierLogo {
            get {
                return this.SupplierLogoField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierLogoField, value) != true)) {
                    this.SupplierLogoField = value;
                    this.RaisePropertyChanged("SupplierLogo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SupplierPenaltyId {
            get {
                return this.SupplierPenaltyIdField;
            }
            set {
                if ((this.SupplierPenaltyIdField.Equals(value) != true)) {
                    this.SupplierPenaltyIdField = value;
                    this.RaisePropertyChanged("SupplierPenaltyId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GTDReportToBankDetail", Namespace="http://schemas.datacontract.org/2004/07/Emex.Document")]
    [System.SerializableAttribute()]
    public partial class GTDReportToBankDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ContragentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountryCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrencyCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateDocInfField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateIssueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ExchRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long GtdIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ObjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParagrafDogovoraField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurchaseFeatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RowNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal Summa01Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal Summa02Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ContragentId {
            get {
                return this.ContragentIdField;
            }
            set {
                if ((this.ContragentIdField.Equals(value) != true)) {
                    this.ContragentIdField = value;
                    this.RaisePropertyChanged("ContragentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryCode {
            get {
                return this.CountryCodeField;
            }
            set {
                if ((this.CountryCodeField.Equals(value) != true)) {
                    this.CountryCodeField = value;
                    this.RaisePropertyChanged("CountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrencyCode {
            get {
                return this.CurrencyCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyCodeField, value) != true)) {
                    this.CurrencyCodeField = value;
                    this.RaisePropertyChanged("CurrencyCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateDocInf {
            get {
                return this.DateDocInfField;
            }
            set {
                if ((this.DateDocInfField.Equals(value) != true)) {
                    this.DateDocInfField = value;
                    this.RaisePropertyChanged("DateDocInf");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateIssue {
            get {
                return this.DateIssueField;
            }
            set {
                if ((this.DateIssueField.Equals(value) != true)) {
                    this.DateIssueField = value;
                    this.RaisePropertyChanged("DateIssue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentCode {
            get {
                return this.DocumentCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentCodeField, value) != true)) {
                    this.DocumentCodeField = value;
                    this.RaisePropertyChanged("DocumentCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ExchRate {
            get {
                return this.ExchRateField;
            }
            set {
                if ((this.ExchRateField.Equals(value) != true)) {
                    this.ExchRateField = value;
                    this.RaisePropertyChanged("ExchRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullNumber {
            get {
                return this.FullNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNumberField, value) != true)) {
                    this.FullNumberField = value;
                    this.RaisePropertyChanged("FullNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long GtdId {
            get {
                return this.GtdIdField;
            }
            set {
                if ((this.GtdIdField.Equals(value) != true)) {
                    this.GtdIdField = value;
                    this.RaisePropertyChanged("GtdId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ObjectId {
            get {
                return this.ObjectIdField;
            }
            set {
                if ((this.ObjectIdField.Equals(value) != true)) {
                    this.ObjectIdField = value;
                    this.RaisePropertyChanged("ObjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParagrafDogovora {
            get {
                return this.ParagrafDogovoraField;
            }
            set {
                if ((object.ReferenceEquals(this.ParagrafDogovoraField, value) != true)) {
                    this.ParagrafDogovoraField = value;
                    this.RaisePropertyChanged("ParagrafDogovora");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PurchaseFeature {
            get {
                return this.PurchaseFeatureField;
            }
            set {
                if ((object.ReferenceEquals(this.PurchaseFeatureField, value) != true)) {
                    this.PurchaseFeatureField = value;
                    this.RaisePropertyChanged("PurchaseFeature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RowNumber {
            get {
                return this.RowNumberField;
            }
            set {
                if ((this.RowNumberField.Equals(value) != true)) {
                    this.RowNumberField = value;
                    this.RaisePropertyChanged("RowNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Summa01 {
            get {
                return this.Summa01Field;
            }
            set {
                if ((this.Summa01Field.Equals(value) != true)) {
                    this.Summa01Field = value;
                    this.RaisePropertyChanged("Summa01");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Summa02 {
            get {
                return this.Summa02Field;
            }
            set {
                if ((this.Summa02Field.Equals(value) != true)) {
                    this.Summa02Field = value;
                    this.RaisePropertyChanged("Summa02");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DocumentService.IDocumentPortal")]
    public interface IDocumentPortal {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInstalledPrinters", ReplyAction="http://tempuri.org/IDocumentPortal/GetInstalledPrintersResponse")]
        string[] GetInstalledPrinters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInstalledPrinters", ReplyAction="http://tempuri.org/IDocumentPortal/GetInstalledPrintersResponse")]
        System.Threading.Tasks.Task<string[]> GetInstalledPrintersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/AddOrUpdateDefaultPrinter", ReplyAction="http://tempuri.org/IDocumentPortal/AddOrUpdateDefaultPrinterResponse")]
        void AddOrUpdateDefaultPrinter(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/AddOrUpdateDefaultPrinter", ReplyAction="http://tempuri.org/IDocumentPortal/AddOrUpdateDefaultPrinterResponse")]
        System.Threading.Tasks.Task AddOrUpdateDefaultPrinterAsync(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetDefaultPrinter", ReplyAction="http://tempuri.org/IDocumentPortal/GetDefaultPrinterResponse")]
        string GetDefaultPrinter(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetDefaultPrinter", ReplyAction="http://tempuri.org/IDocumentPortal/GetDefaultPrinterResponse")]
        System.Threading.Tasks.Task<string> GetDefaultPrinterAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateRevise", ReplyAction="http://tempuri.org/IDocumentPortal/CreateReviseResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateRevise(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int groupReviseId, System.DateTime dateBegin, System.DateTime dateEnd, string name, string listReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateRevise", ReplyAction="http://tempuri.org/IDocumentPortal/CreateReviseResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateReviseAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int groupReviseId, System.DateTime dateBegin, System.DateTime dateEnd, string name, string listReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateRevisePriceCost", ReplyAction="http://tempuri.org/IDocumentPortal/CreateRevisePriceCostResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateRevisePriceCost(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int RevisePriceCostReportHeaderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateRevisePriceCost", ReplyAction="http://tempuri.org/IDocumentPortal/CreateRevisePriceCostResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateRevisePriceCostAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int RevisePriceCostReportHeaderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreatePriceListReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreatePriceListReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreatePriceListReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, EmExServiceClient.DocumentService.PriceList[] RevisePriceCostList, EmExServiceClient.DocumentService.UserMailing lUm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreatePriceListReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreatePriceListReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreatePriceListReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, EmExServiceClient.DocumentService.PriceList[] RevisePriceCostList, EmExServiceClient.DocumentService.UserMailing lUm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetUtilDocument", ReplyAction="http://tempuri.org/IDocumentPortal/GetUtilDocumentResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetUtilDocument(EmExServiceClient.DocumentService.AuthentificationData sender, int actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string version, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetUtilDocument", ReplyAction="http://tempuri.org/IDocumentPortal/GetUtilDocumentResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetUtilDocumentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string version, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInventoryListReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetInventoryListReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetInventoryListReport(EmExServiceClient.DocumentService.AuthentificationData sender, int actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInventoryListReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetInventoryListReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInventoryListReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreatePreTrialClaim", ReplyAction="http://tempuri.org/IDocumentPortal/CreatePreTrialClaimResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreatePreTrialClaim(EmExServiceClient.DocumentService.AuthentificationData sender, long preTrialClaimId, EmExServiceClient.DocumentService.ContragentDebtNotification notification, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreatePreTrialClaim", ReplyAction="http://tempuri.org/IDocumentPortal/CreatePreTrialClaimResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreatePreTrialClaimAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long preTrialClaimId, EmExServiceClient.DocumentService.ContragentDebtNotification notification, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInvoiceTypeOneHeaders", ReplyAction="http://tempuri.org/IDocumentPortal/GetInvoiceTypeOneHeadersResponse")]
        EmExServiceClient.DocumentService.InvoiceTypeOneHeader[] GetInvoiceTypeOneHeaders(string customerLogo, byte[] timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInvoiceTypeOneHeaders", ReplyAction="http://tempuri.org/IDocumentPortal/GetInvoiceTypeOneHeadersResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.InvoiceTypeOneHeader[]> GetInvoiceTypeOneHeadersAsync(string customerLogo, byte[] timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInvoiceTypeOneHeadersByDates", ReplyAction="http://tempuri.org/IDocumentPortal/GetInvoiceTypeOneHeadersByDatesResponse")]
        EmExServiceClient.DocumentService.InvoiceTypeOneHeader[] GetInvoiceTypeOneHeadersByDates(string customerLogo, System.DateTime dateFrom, System.DateTime dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInvoiceTypeOneHeadersByDates", ReplyAction="http://tempuri.org/IDocumentPortal/GetInvoiceTypeOneHeadersByDatesResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.InvoiceTypeOneHeader[]> GetInvoiceTypeOneHeadersByDatesAsync(string customerLogo, System.DateTime dateFrom, System.DateTime dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInvoiceTypeOneDetails", ReplyAction="http://tempuri.org/IDocumentPortal/GetInvoiceTypeOneDetailsResponse")]
        EmExServiceClient.DocumentService.InvoiceTypeOneDetail[] GetInvoiceTypeOneDetails(int[] ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInvoiceTypeOneDetails", ReplyAction="http://tempuri.org/IDocumentPortal/GetInvoiceTypeOneDetailsResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.InvoiceTypeOneDetail[]> GetInvoiceTypeOneDetailsAsync(int[] ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInvoiceReturnByQuestionReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetInvoiceReturnByQuestionReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetInvoiceReturnByQuestionReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long questionId, string documentNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInvoiceReturnByQuestionReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetInvoiceReturnByQuestionReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInvoiceReturnByQuestionReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long questionId, string documentNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInvoiceReturnByDefectPreReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetInvoiceReturnByDefectPreReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetInvoiceReturnByDefectPreReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, bool isResident, long defectPreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInvoiceReturnByDefectPreReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetInvoiceReturnByDefectPreReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInvoiceReturnByDefectPreReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, bool isResident, long defectPreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetReturnSpecificationNotResidentReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetReturnSpecificationNotResidentReportRespons" +
            "e")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetReturnSpecificationNotResidentReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long defectPreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetReturnSpecificationNotResidentReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetReturnSpecificationNotResidentReportRespons" +
            "e")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetReturnSpecificationNotResidentReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long defectPreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg12WebReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg12WebReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg12WebReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long questionId, string documentNumber, string detailName, string detailNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg12WebReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg12WebReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg12WebReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long questionId, string documentNumber, string detailName, string detailNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg12v2WebReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg12v2WebReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg12v2WebReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long defectPreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg12v2WebReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg12v2WebReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg12v2WebReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long defectPreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg2WebReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg2WebReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg2WebReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long questionId, string documentNumber, string detailName, string detailNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg2WebReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg2WebReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg2WebReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long questionId, string documentNumber, string detailName, string detailNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg2v2WebReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg2v2WebReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg2v2WebReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long defectPreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg2v2WebReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg2v2WebReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg2v2WebReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long defectPreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetSuppliersReturnsAuthority", ReplyAction="http://tempuri.org/IDocumentPortal/GetSuppliersReturnsAuthorityResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetSuppliersReturnsAuthority(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long supplierId, int suppliersReturnsAuthoritiesId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetSuppliersReturnsAuthority", ReplyAction="http://tempuri.org/IDocumentPortal/GetSuppliersReturnsAuthorityResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetSuppliersReturnsAuthorityAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long supplierId, int suppliersReturnsAuthoritiesId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateSupplierBonusAct", ReplyAction="http://tempuri.org/IDocumentPortal/CreateSupplierBonusActResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateSupplierBonusAct(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierBonusId, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateSupplierBonusAct", ReplyAction="http://tempuri.org/IDocumentPortal/CreateSupplierBonusActResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateSupplierBonusActAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierBonusId, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateSupplierBonusReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateSupplierBonusReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateSupplierBonusReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierBonusId, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateSupplierBonusReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateSupplierBonusReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateSupplierBonusReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierBonusId, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendSupplierBonusDocuments", ReplyAction="http://tempuri.org/IDocumentPortal/SendSupplierBonusDocumentsResponse")]
        bool SendSupplierBonusDocuments(long supplierBonusId, string[] emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendSupplierBonusDocuments", ReplyAction="http://tempuri.org/IDocumentPortal/SendSupplierBonusDocumentsResponse")]
        System.Threading.Tasks.Task<bool> SendSupplierBonusDocumentsAsync(long supplierBonusId, string[] emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCustomerSortingServiceAct", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCustomerSortingServiceActResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateCustomerSortingServiceAct(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long customerSortingServiceId, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCustomerSortingServiceAct", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCustomerSortingServiceActResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCustomerSortingServiceActAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long customerSortingServiceId, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCustomerSortingServiceInvoice", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCustomerSortingServiceInvoiceResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateCustomerSortingServiceInvoice(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long customerSortingServiceId, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCustomerSortingServiceInvoice", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCustomerSortingServiceInvoiceResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCustomerSortingServiceInvoiceAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long customerSortingServiceId, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCustomerSortingServiceDetails", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCustomerSortingServiceDetailsResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateCustomerSortingServiceDetails(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long customerSortingServiceId, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCustomerSortingServiceDetails", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCustomerSortingServiceDetailsResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCustomerSortingServiceDetailsAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long customerSortingServiceId, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendCustomerSortingServiceDocuments", ReplyAction="http://tempuri.org/IDocumentPortal/SendCustomerSortingServiceDocumentsResponse")]
        EmExServiceClient.DocumentService.OperationResult SendCustomerSortingServiceDocuments(long customerSortingServiceId, string[] emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendCustomerSortingServiceDocuments", ReplyAction="http://tempuri.org/IDocumentPortal/SendCustomerSortingServiceDocumentsResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendCustomerSortingServiceDocumentsAsync(long customerSortingServiceId, string[] emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetUpdReturn", ReplyAction="http://tempuri.org/IDocumentPortal/GetUpdReturnResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetUpdReturn(EmExServiceClient.DocumentService.AuthentificationData sender, long invoicesSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetUpdReturn", ReplyAction="http://tempuri.org/IDocumentPortal/GetUpdReturnResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetUpdReturnAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long invoicesSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetUpdReturnCustomer", ReplyAction="http://tempuri.org/IDocumentPortal/GetUpdReturnCustomerResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetUpdReturnCustomer(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetUpdReturnCustomer", ReplyAction="http://tempuri.org/IDocumentPortal/GetUpdReturnCustomerResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetUpdReturnCustomerAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendDocumentWithMessage", ReplyAction="http://tempuri.org/IDocumentPortal/SendDocumentWithMessageResponse")]
        EmExServiceClient.DocumentService.OperationResult SendDocumentWithMessage(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentType docType, long objectId, string subject, string body, string[] emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendDocumentWithMessage", ReplyAction="http://tempuri.org/IDocumentPortal/SendDocumentWithMessageResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendDocumentWithMessageAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentType docType, long objectId, string subject, string body, string[] emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendDocumentWithMessageSimple", ReplyAction="http://tempuri.org/IDocumentPortal/SendDocumentWithMessageSimpleResponse")]
        EmExServiceClient.DocumentService.OperationResult SendDocumentWithMessageSimple(EmExServiceClient.DocumentService.AuthentificationData sender, long objectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendDocumentWithMessageSimple", ReplyAction="http://tempuri.org/IDocumentPortal/SendDocumentWithMessageSimpleResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendDocumentWithMessageSimpleAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long objectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetActClaim_v2", ReplyAction="http://tempuri.org/IDocumentPortal/GetActClaim_v2Response")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetActClaim_v2(EmExServiceClient.DocumentService.AuthentificationData sender, long claimHeaderId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetActClaim_v2", ReplyAction="http://tempuri.org/IDocumentPortal/GetActClaim_v2Response")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetActClaim_v2Async(EmExServiceClient.DocumentService.AuthentificationData sender, long claimHeaderId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetActClaim_v2_Sheet", ReplyAction="http://tempuri.org/IDocumentPortal/GetActClaim_v2_SheetResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetActClaim_v2_Sheet(EmExServiceClient.DocumentService.AuthentificationData sender, long claimHeaderId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetActClaim_v2_Sheet", ReplyAction="http://tempuri.org/IDocumentPortal/GetActClaim_v2_SheetResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetActClaim_v2_SheetAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long claimHeaderId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendReclamationDocuments", ReplyAction="http://tempuri.org/IDocumentPortal/SendReclamationDocumentsResponse")]
        bool SendReclamationDocuments(long claimHeaderId, string[] emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendReclamationDocuments", ReplyAction="http://tempuri.org/IDocumentPortal/SendReclamationDocumentsResponse")]
        System.Threading.Tasks.Task<bool> SendReclamationDocumentsAsync(long claimHeaderId, string[] emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetUkd", ReplyAction="http://tempuri.org/IDocumentPortal/GetUkdResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetUkd(EmExServiceClient.DocumentService.AuthentificationData sender, long correctionInvoiceId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetUkd", ReplyAction="http://tempuri.org/IDocumentPortal/GetUkdResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetUkdAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long correctionInvoiceId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetClaimHandlingGoodsDocuments", ReplyAction="http://tempuri.org/IDocumentPortal/GetClaimHandlingGoodsDocumentsResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetClaimHandlingGoodsDocuments(EmExServiceClient.DocumentService.AuthentificationData sender, System.DateTime startingDateTime, System.DateTime endingDateTime, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string messageSubject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetClaimHandlingGoodsDocuments", ReplyAction="http://tempuri.org/IDocumentPortal/GetClaimHandlingGoodsDocumentsResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetClaimHandlingGoodsDocumentsAsync(EmExServiceClient.DocumentService.AuthentificationData sender, System.DateTime startingDateTime, System.DateTime endingDateTime, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string messageSubject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetOnlineClientPayment", ReplyAction="http://tempuri.org/IDocumentPortal/GetOnlineClientPaymentResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetOnlineClientPayment(EmExServiceClient.DocumentService.AuthentificationData sender, long actId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetOnlineClientPayment", ReplyAction="http://tempuri.org/IDocumentPortal/GetOnlineClientPaymentResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetOnlineClientPaymentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long actId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendOnlineClientPaymentDocuments", ReplyAction="http://tempuri.org/IDocumentPortal/SendOnlineClientPaymentDocumentsResponse")]
        bool SendOnlineClientPaymentDocuments(long actId, string[] emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendOnlineClientPaymentDocuments", ReplyAction="http://tempuri.org/IDocumentPortal/SendOnlineClientPaymentDocumentsResponse")]
        System.Threading.Tasks.Task<bool> SendOnlineClientPaymentDocumentsAsync(long actId, string[] emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateTorg12ReturnSupplier", ReplyAction="http://tempuri.org/IDocumentPortal/CreateTorg12ReturnSupplierResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateTorg12ReturnSupplier(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateTorg12ReturnSupplier", ReplyAction="http://tempuri.org/IDocumentPortal/CreateTorg12ReturnSupplierResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateTorg12ReturnSupplierAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoiceSupplierRetrun", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoiceSupplierRetrunResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoiceSupplierRetrun(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoiceSupplierRetrun", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoiceSupplierRetrunResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoiceSupplierRetrunAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendRestickeringPayment", ReplyAction="http://tempuri.org/IDocumentPortal/SendRestickeringPaymentResponse")]
        EmExServiceClient.DocumentService.OperationResult SendRestickeringPayment(long barcodeProcessingPaymentId, string[] eMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendRestickeringPayment", ReplyAction="http://tempuri.org/IDocumentPortal/SendRestickeringPaymentResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendRestickeringPaymentAsync(long barcodeProcessingPaymentId, string[] eMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateRestickeringPaymentDocs", ReplyAction="http://tempuri.org/IDocumentPortal/CreateRestickeringPaymentDocsResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateRestickeringPaymentDocs(long barcodeProcessingPaymentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateRestickeringPaymentDocs", ReplyAction="http://tempuri.org/IDocumentPortal/CreateRestickeringPaymentDocsResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateRestickeringPaymentDocsAsync(long barcodeProcessingPaymentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateStickerDocument", ReplyAction="http://tempuri.org/IDocumentPortal/CreateStickerDocumentResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateStickerDocument(EmExServiceClient.DocumentService.AuthentificationData sender, long reestrObjectId, string logo, string docNumber, string docDate, System.DateTime dateAndTime, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateStickerDocument", ReplyAction="http://tempuri.org/IDocumentPortal/CreateStickerDocumentResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateStickerDocumentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long reestrObjectId, string logo, string docNumber, string docDate, System.DateTime dateAndTime, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetBccMercShipment", ReplyAction="http://tempuri.org/IDocumentPortal/GetBccMercShipmentResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetBccMercShipment(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSfId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetBccMercShipment", ReplyAction="http://tempuri.org/IDocumentPortal/GetBccMercShipmentResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetBccMercShipmentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSfId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetBccMercReturn", ReplyAction="http://tempuri.org/IDocumentPortal/GetBccMercReturnResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetBccMercReturn(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSfId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetBccMercReturn", ReplyAction="http://tempuri.org/IDocumentPortal/GetBccMercReturnResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetBccMercReturnAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSfId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg2CustomerReturn", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg2CustomerReturnResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg2CustomerReturn(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg2CustomerReturn", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg2CustomerReturnResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg2CustomerReturnAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg12CustomerReturn", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg12CustomerReturnResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg12CustomerReturn(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg12CustomerReturn", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg12CustomerReturnResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg12CustomerReturnAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg12CustomerReturnExtended", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg12CustomerReturnExtendedResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg12CustomerReturnExtended(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg12CustomerReturnExtended", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg12CustomerReturnExtendedResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg12CustomerReturnExtendedAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInvoiceCustomerReturn", ReplyAction="http://tempuri.org/IDocumentPortal/GetInvoiceCustomerReturnResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetInvoiceCustomerReturn(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInvoiceCustomerReturn", ReplyAction="http://tempuri.org/IDocumentPortal/GetInvoiceCustomerReturnResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInvoiceCustomerReturnAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendMeasuredBoxesDataInfo", ReplyAction="http://tempuri.org/IDocumentPortal/SendMeasuredBoxesDataInfoResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles SendMeasuredBoxesDataInfo(EmExServiceClient.DocumentService.AuthentificationData sender, string xmlData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendMeasuredBoxesDataInfo", ReplyAction="http://tempuri.org/IDocumentPortal/SendMeasuredBoxesDataInfoResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> SendMeasuredBoxesDataInfoAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string xmlData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/BalanceCustomerBN", ReplyAction="http://tempuri.org/IDocumentPortal/BalanceCustomerBNResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles BalanceCustomerBN(EmExServiceClient.DocumentService.AuthentificationData sender, long customerId, System.Nullable<System.DateTime> dateStart, string customerLogo, System.Nullable<int> balance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/BalanceCustomerBN", ReplyAction="http://tempuri.org/IDocumentPortal/BalanceCustomerBNResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> BalanceCustomerBNAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long customerId, System.Nullable<System.DateTime> dateStart, string customerLogo, System.Nullable<int> balance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/Inv3", ReplyAction="http://tempuri.org/IDocumentPortal/Inv3Response")]
        EmExServiceClient.DocumentService.OperationResultWithFiles Inv3(EmExServiceClient.DocumentService.AuthentificationData sender, long reasonObjectId, int reasonTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/Inv3", ReplyAction="http://tempuri.org/IDocumentPortal/Inv3Response")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> Inv3Async(EmExServiceClient.DocumentService.AuthentificationData sender, long reasonObjectId, int reasonTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendEmailsAboutOuterExpertise", ReplyAction="http://tempuri.org/IDocumentPortal/SendEmailsAboutOuterExpertiseResponse")]
        EmExServiceClient.DocumentService.OperationResult SendEmailsAboutOuterExpertise(EmExServiceClient.DocumentService.AuthentificationData sender);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendEmailsAboutOuterExpertise", ReplyAction="http://tempuri.org/IDocumentPortal/SendEmailsAboutOuterExpertiseResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendEmailsAboutOuterExpertiseAsync(EmExServiceClient.DocumentService.AuthentificationData sender);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateClaimForCounterfeit", ReplyAction="http://tempuri.org/IDocumentPortal/CreateClaimForCounterfeitResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateClaimForCounterfeit(EmExServiceClient.DocumentService.AuthentificationData sender, long claimForCounterfeitHeaderId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateClaimForCounterfeit", ReplyAction="http://tempuri.org/IDocumentPortal/CreateClaimForCounterfeitResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateClaimForCounterfeitAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long claimForCounterfeitHeaderId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInventoryResultDirectiveReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetInventoryResultDirectiveReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetInventoryResultDirectiveReport(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInventoryResultDirectiveReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetInventoryResultDirectiveReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInventoryResultDirectiveReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInventoryOrderReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetInventoryOrderReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetInventoryOrderReport(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInventoryOrderReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetInventoryOrderReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInventoryOrderReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInventoryRegisterReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetInventoryRegisterReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetInventoryRegisterReport(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInventoryRegisterReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetInventoryRegisterReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInventoryRegisterReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetSupplierReturnsRegisterReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetSupplierReturnsRegisterReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetSupplierReturnsRegisterReport(EmExServiceClient.DocumentService.AuthentificationData sender, int registerId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetSupplierReturnsRegisterReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetSupplierReturnsRegisterReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetSupplierReturnsRegisterReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int registerId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInventoryStatementReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetInventoryStatementReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetInventoryStatementReport(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetInventoryStatementReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetInventoryStatementReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInventoryStatementReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/PrintRegBoxPackSheet", ReplyAction="http://tempuri.org/IDocumentPortal/PrintRegBoxPackSheetResponse")]
        void PrintRegBoxPackSheet(EmExServiceClient.DocumentService.AuthentificationData sender, string xmlData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/PrintRegBoxPackSheet", ReplyAction="http://tempuri.org/IDocumentPortal/PrintRegBoxPackSheetResponse")]
        System.Threading.Tasks.Task PrintRegBoxPackSheetAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string xmlData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg2V2", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg2V2Response")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg2V2(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSfLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg2V2", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg2V2Response")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg2V2Async(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSfLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoiceOnlineClientPayment", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoiceOnlineClientPaymentResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoiceOnlineClientPayment(EmExServiceClient.DocumentService.AuthentificationData sender, long reasonId, EmExServiceClient.DocumentService.DocumentReasonType reasonType, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoiceOnlineClientPayment", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoiceOnlineClientPaymentResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoiceOnlineClientPaymentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long reasonId, EmExServiceClient.DocumentService.DocumentReasonType reasonType, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetDueDiligenceReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetDueDiligenceReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetDueDiligenceReport(EmExServiceClient.DocumentService.AuthentificationData sender, int contragentVerificationId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, bool hasDeclaration, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetDueDiligenceReport", ReplyAction="http://tempuri.org/IDocumentPortal/GetDueDiligenceReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetDueDiligenceReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int contragentVerificationId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, bool hasDeclaration, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateStickerDocumentByEntityId", ReplyAction="http://tempuri.org/IDocumentPortal/CreateStickerDocumentByEntityIdResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateStickerDocumentByEntityId(EmExServiceClient.DocumentService.AuthentificationData sender, long returnEntityId, int returnEntityType, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateStickerDocumentByEntityId", ReplyAction="http://tempuri.org/IDocumentPortal/CreateStickerDocumentByEntityIdResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateStickerDocumentByEntityIdAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long returnEntityId, int returnEntityType, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg2V2ByTorg2Id", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg2V2ByTorg2IdResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg2V2ByTorg2Id(EmExServiceClient.DocumentService.AuthentificationData sender, long torg2Id, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetTorg2V2ByTorg2Id", ReplyAction="http://tempuri.org/IDocumentPortal/GetTorg2V2ByTorg2IdResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg2V2ByTorg2IdAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long torg2Id, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCmrByDefectPreId", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCmrByDefectPreIdResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateCmrByDefectPreId(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCmrByDefectPreId", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCmrByDefectPreIdResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCmrByDefectPreIdAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoiceReturnNonResidentInfo", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoiceReturnNonResidentInfoResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoiceReturnNonResidentInfo(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoiceReturnNonResidentInfo", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoiceReturnNonResidentInfoResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoiceReturnNonResidentInfoAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoiceReturnNonResident", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoiceReturnNonResidentResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoiceReturnNonResident(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreUnionId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoiceReturnNonResident", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoiceReturnNonResidentResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoiceReturnNonResidentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreUnionId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateTorg12ReturnNonResident", ReplyAction="http://tempuri.org/IDocumentPortal/CreateTorg12ReturnNonResidentResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateTorg12ReturnNonResident(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreUnionId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateTorg12ReturnNonResident", ReplyAction="http://tempuri.org/IDocumentPortal/CreateTorg12ReturnNonResidentResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateTorg12ReturnNonResidentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreUnionId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendLostInfo", ReplyAction="http://tempuri.org/IDocumentPortal/SendLostInfoResponse")]
        bool SendLostInfo(EmExServiceClient.DocumentService.AuthentificationData sender, long operatorId, long bookCargoMoscowId, string body, string subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendLostInfo", ReplyAction="http://tempuri.org/IDocumentPortal/SendLostInfoResponse")]
        System.Threading.Tasks.Task<bool> SendLostInfoAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long operatorId, long bookCargoMoscowId, string body, string subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateBuhSverkaReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateBuhSverkaReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateBuhSverkaReport(EmExServiceClient.DocumentService.AuthentificationData sender, long buhContragentId, System.DateTime periodStart, System.DateTime periodEnd, string buhSchet, string buhSubSchet, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateBuhSverkaReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateBuhSverkaReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateBuhSverkaReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long buhContragentId, System.DateTime periodStart, System.DateTime periodEnd, string buhSchet, string buhSubSchet, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateBuhSverkaReportWithMoney", ReplyAction="http://tempuri.org/IDocumentPortal/CreateBuhSverkaReportWithMoneyResponse")]
        EmExServiceClient.DocumentService.OperationResultSverka CreateBuhSverkaReportWithMoney(EmExServiceClient.DocumentService.AuthentificationData sender, long buhContragentId, System.DateTime periodStart, System.DateTime periodEnd, string buhSchet, string buhSubSchet, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateBuhSverkaReportWithMoney", ReplyAction="http://tempuri.org/IDocumentPortal/CreateBuhSverkaReportWithMoneyResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultSverka> CreateBuhSverkaReportWithMoneyAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long buhContragentId, System.DateTime periodStart, System.DateTime periodEnd, string buhSchet, string buhSubSchet, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateJointProcessingPaymentDocs", ReplyAction="http://tempuri.org/IDocumentPortal/CreateJointProcessingPaymentDocsResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateJointProcessingPaymentDocs(long jointProcessingPaymentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateJointProcessingPaymentDocs", ReplyAction="http://tempuri.org/IDocumentPortal/CreateJointProcessingPaymentDocsResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateJointProcessingPaymentDocsAsync(long jointProcessingPaymentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateJointProcessingPaymentDocs_v2", ReplyAction="http://tempuri.org/IDocumentPortal/CreateJointProcessingPaymentDocs_v2Response")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateJointProcessingPaymentDocs_v2(EmExServiceClient.DocumentService.AuthentificationData sender, long jointProcessingPaymentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateJointProcessingPaymentDocs_v2", ReplyAction="http://tempuri.org/IDocumentPortal/CreateJointProcessingPaymentDocs_v2Response")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateJointProcessingPaymentDocs_v2Async(EmExServiceClient.DocumentService.AuthentificationData sender, long jointProcessingPaymentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendJointProcessingPayment", ReplyAction="http://tempuri.org/IDocumentPortal/SendJointProcessingPaymentResponse")]
        EmExServiceClient.DocumentService.OperationResult SendJointProcessingPayment(long jointProcessingPaymentId, string[] eMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendJointProcessingPayment", ReplyAction="http://tempuri.org/IDocumentPortal/SendJointProcessingPaymentResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendJointProcessingPaymentAsync(long jointProcessingPaymentId, string[] eMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateProtectionFromReturnPaymentDocs", ReplyAction="http://tempuri.org/IDocumentPortal/CreateProtectionFromReturnPaymentDocsResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateProtectionFromReturnPaymentDocs(long protectionFromReturnPaymentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateProtectionFromReturnPaymentDocs", ReplyAction="http://tempuri.org/IDocumentPortal/CreateProtectionFromReturnPaymentDocsResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateProtectionFromReturnPaymentDocsAsync(long protectionFromReturnPaymentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendProtectionFromReturnPayment", ReplyAction="http://tempuri.org/IDocumentPortal/SendProtectionFromReturnPaymentResponse")]
        EmExServiceClient.DocumentService.OperationResult SendProtectionFromReturnPayment(long protectionFromReturnPaymentId, string[] eMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendProtectionFromReturnPayment", ReplyAction="http://tempuri.org/IDocumentPortal/SendProtectionFromReturnPaymentResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendProtectionFromReturnPaymentAsync(long protectionFromReturnPaymentId, string[] eMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetContrafactList", ReplyAction="http://tempuri.org/IDocumentPortal/GetContrafactListResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetContrafactList(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetContrafactList", ReplyAction="http://tempuri.org/IDocumentPortal/GetContrafactListResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetContrafactListAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/DebtSupplierGet", ReplyAction="http://tempuri.org/IDocumentPortal/DebtSupplierGetResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles DebtSupplierGet(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int balanceId, System.Nullable<int> contragentId, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/DebtSupplierGet", ReplyAction="http://tempuri.org/IDocumentPortal/DebtSupplierGetResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> DebtSupplierGetAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int balanceId, System.Nullable<int> contragentId, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendSupplierReturnsRegisterReport", ReplyAction="http://tempuri.org/IDocumentPortal/SendSupplierReturnsRegisterReportResponse")]
        EmExServiceClient.DocumentService.OperationResult SendSupplierReturnsRegisterReport(EmExServiceClient.DocumentService.AuthentificationData sender, int registerId, EmExServiceClient.DocumentService.DocumentOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendSupplierReturnsRegisterReport", ReplyAction="http://tempuri.org/IDocumentPortal/SendSupplierReturnsRegisterReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendSupplierReturnsRegisterReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int registerId, EmExServiceClient.DocumentService.DocumentOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/DebtCustomerGet", ReplyAction="http://tempuri.org/IDocumentPortal/DebtCustomerGetResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles DebtCustomerGet(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int balanceId, System.Nullable<int> contragentId, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/DebtCustomerGet", ReplyAction="http://tempuri.org/IDocumentPortal/DebtCustomerGetResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> DebtCustomerGetAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int balanceId, System.Nullable<int> contragentId, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendOF8WebServiceDocuments", ReplyAction="http://tempuri.org/IDocumentPortal/SendOF8WebServiceDocumentsResponse")]
        bool SendOF8WebServiceDocuments(long OF8WebServiceId, string[] emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendOF8WebServiceDocuments", ReplyAction="http://tempuri.org/IDocumentPortal/SendOF8WebServiceDocumentsResponse")]
        System.Threading.Tasks.Task<bool> SendOF8WebServiceDocumentsAsync(long OF8WebServiceId, string[] emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetOF8WebServiceDocument", ReplyAction="http://tempuri.org/IDocumentPortal/GetOF8WebServiceDocumentResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetOF8WebServiceDocument(EmExServiceClient.DocumentService.AuthentificationData sender, long OF8WebServiceId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetOF8WebServiceDocument", ReplyAction="http://tempuri.org/IDocumentPortal/GetOF8WebServiceDocumentResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetOF8WebServiceDocumentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long OF8WebServiceId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetAccountCorrection", ReplyAction="http://tempuri.org/IDocumentPortal/GetAccountCorrectionResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetAccountCorrection(EmExServiceClient.DocumentService.AuthentificationData sender, long correctionInvoiceId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetAccountCorrection", ReplyAction="http://tempuri.org/IDocumentPortal/GetAccountCorrectionResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetAccountCorrectionAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long correctionInvoiceId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetExcelPriceErrors", ReplyAction="http://tempuri.org/IDocumentPortal/GetExcelPriceErrorsResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetExcelPriceErrors(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long orderInfoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetExcelPriceErrors", ReplyAction="http://tempuri.org/IDocumentPortal/GetExcelPriceErrorsResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetExcelPriceErrorsAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long orderInfoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInmotionReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInmotionReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateInmotionReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, bool isOpt, System.DateTime dateBegin, System.DateTime dateEnd, long userId, int dateType, int userType, bool bitNotIsRead, int stateParam, bool bitForReports, string queryDetail, bool isLocal, System.Nullable<long> locationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInmotionReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInmotionReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInmotionReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, bool isOpt, System.DateTime dateBegin, System.DateTime dateEnd, long userId, int dateType, int userType, bool bitNotIsRead, int stateParam, bool bitForReports, string queryDetail, bool isLocal, System.Nullable<long> locationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActContrafact", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActContrafactResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateActContrafact(EmExServiceClient.DocumentService.AuthentificationData sender, int contrafactGroupId, bool useFaximille, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printerName, int paymentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActContrafact", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActContrafactResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActContrafactAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int contrafactGroupId, bool useFaximille, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printerName, int paymentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendActContrafact", ReplyAction="http://tempuri.org/IDocumentPortal/SendActContrafactResponse")]
        EmExServiceClient.DocumentService.OperationResult SendActContrafact(long contrafactGroupId, int paymentType, string[] eMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendActContrafact", ReplyAction="http://tempuri.org/IDocumentPortal/SendActContrafactResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendActContrafactAsync(long contrafactGroupId, int paymentType, string[] eMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateSupplierReturnsActDocument", ReplyAction="http://tempuri.org/IDocumentPortal/CreateSupplierReturnsActDocumentResponse")]
        System.Nullable<long> CreateSupplierReturnsActDocument(EmExServiceClient.DocumentService.AuthentificationData sender, string supplierLogo, int userId, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateSupplierReturnsActDocument", ReplyAction="http://tempuri.org/IDocumentPortal/CreateSupplierReturnsActDocumentResponse")]
        System.Threading.Tasks.Task<System.Nullable<long>> CreateSupplierReturnsActDocumentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string supplierLogo, int userId, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateSupplierReturnsAct", ReplyAction="http://tempuri.org/IDocumentPortal/CreateSupplierReturnsActResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateSupplierReturnsAct(EmExServiceClient.DocumentService.AuthentificationData sender, long actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateSupplierReturnsAct", ReplyAction="http://tempuri.org/IDocumentPortal/CreateSupplierReturnsActResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateSupplierReturnsActAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCustomerReturnsAct", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCustomerReturnsActResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateCustomerReturnsAct(EmExServiceClient.DocumentService.AuthentificationData sender, long actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCustomerReturnsAct", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCustomerReturnsActResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCustomerReturnsActAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/IsAlive", ReplyAction="http://tempuri.org/IDocumentPortal/IsAliveResponse")]
        void IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/IsAlive", ReplyAction="http://tempuri.org/IDocumentPortal/IsAliveResponse")]
        System.Threading.Tasks.Task IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/PrintActOfAbsence", ReplyAction="http://tempuri.org/IDocumentPortal/PrintActOfAbsenceResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles PrintActOfAbsence(EmExServiceClient.DocumentService.AuthentificationData sender, string Writer_Post, string Writer_FullFIO, string Worker_Post, string Worker_FullFIO, System.DateTime DateAbsence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/PrintActOfAbsence", ReplyAction="http://tempuri.org/IDocumentPortal/PrintActOfAbsenceResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> PrintActOfAbsenceAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string Writer_Post, string Writer_FullFIO, string Worker_Post, string Worker_FullFIO, System.DateTime DateAbsence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/PrintPreBillForRegionShipping", ReplyAction="http://tempuri.org/IDocumentPortal/PrintPreBillForRegionShippingResponse")]
        EmExServiceClient.DocumentService.OperationResult PrintPreBillForRegionShipping(EmExServiceClient.DocumentService.AuthentificationData sender, string transportCompanyLogo, short[] routes, string customerLogo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/PrintPreBillForRegionShipping", ReplyAction="http://tempuri.org/IDocumentPortal/PrintPreBillForRegionShippingResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> PrintPreBillForRegionShippingAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string transportCompanyLogo, short[] routes, string customerLogo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/PrintBillForRegionShipping", ReplyAction="http://tempuri.org/IDocumentPortal/PrintBillForRegionShippingResponse")]
        EmExServiceClient.DocumentService.OperationResult PrintBillForRegionShipping(EmExServiceClient.DocumentService.AuthentificationData sender, long lotNo, bool sendMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/PrintBillForRegionShipping", ReplyAction="http://tempuri.org/IDocumentPortal/PrintBillForRegionShippingResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> PrintBillForRegionShippingAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long lotNo, bool sendMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/PrintActClaim", ReplyAction="http://tempuri.org/IDocumentPortal/PrintActClaimResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles PrintActClaim(EmExServiceClient.DocumentService.AuthentificationData sender, long invoicesSFlostId, long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/PrintActClaim", ReplyAction="http://tempuri.org/IDocumentPortal/PrintActClaimResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> PrintActClaimAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long invoicesSFlostId, long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/PrintWaybillForShipping", ReplyAction="http://tempuri.org/IDocumentPortal/PrintWaybillForShippingResponse")]
        EmExServiceClient.DocumentService.OperationResult PrintWaybillForShipping(EmExServiceClient.DocumentService.AuthentificationData sender, long chiefAccountantId, long lotNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/PrintWaybillForShipping", ReplyAction="http://tempuri.org/IDocumentPortal/PrintWaybillForShippingResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> PrintWaybillForShippingAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long chiefAccountantId, long lotNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/AntishippingCloseAction", ReplyAction="http://tempuri.org/IDocumentPortal/AntishippingCloseActionResponse")]
        EmExServiceClient.DocumentService.OperationResult AntishippingCloseAction(EmExServiceClient.DocumentService.AuthentificationData sender, long antiShippingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/AntishippingCloseAction", ReplyAction="http://tempuri.org/IDocumentPortal/AntishippingCloseActionResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> AntishippingCloseActionAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long antiShippingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoice", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoiceResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoice(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoice", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoiceResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoiceAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/StartWatchAccountFile", ReplyAction="http://tempuri.org/IDocumentPortal/StartWatchAccountFileResponse")]
        string StartWatchAccountFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/StartWatchAccountFile", ReplyAction="http://tempuri.org/IDocumentPortal/StartWatchAccountFileResponse")]
        System.Threading.Tasks.Task<string> StartWatchAccountFileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateM4", ReplyAction="http://tempuri.org/IDocumentPortal/CreateM4Response")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateM4(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateM4", ReplyAction="http://tempuri.org/IDocumentPortal/CreateM4Response")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateM4Async(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActClaim", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActClaimResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateActClaim(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActClaim", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActClaimResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActClaimAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActDefectReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActDefectReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateActDefectReport(EmExServiceClient.DocumentService.AuthentificationData sender, long defectActsId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActDefectReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActDefectReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActDefectReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectActsId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActOfAbsence", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActOfAbsenceResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateActOfAbsence(EmExServiceClient.DocumentService.AuthentificationData sender, string Writer_Post, string Writer_FullFIO, string Worker_Post, string Worker_FullFIO, System.DateTime DateAbsence, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActOfAbsence", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActOfAbsenceResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActOfAbsenceAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string Writer_Post, string Writer_FullFIO, string Worker_Post, string Worker_FullFIO, System.DateTime DateAbsence, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateRegionPackSheet", ReplyAction="http://tempuri.org/IDocumentPortal/CreateRegionPackSheetResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateRegionPackSheet(EmExServiceClient.DocumentService.AuthentificationData sender, long lotNo, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateRegionPackSheet", ReplyAction="http://tempuri.org/IDocumentPortal/CreateRegionPackSheetResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateRegionPackSheetAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long lotNo, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateRegionPrePackSheet", ReplyAction="http://tempuri.org/IDocumentPortal/CreateRegionPrePackSheetResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateRegionPrePackSheet(EmExServiceClient.DocumentService.AuthentificationData sender, string transportCompanyLogo, short[] routes, string customerLogo, long lotNo, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateRegionPrePackSheet", ReplyAction="http://tempuri.org/IDocumentPortal/CreateRegionPrePackSheetResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateRegionPrePackSheetAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string transportCompanyLogo, short[] routes, string customerLogo, long lotNo, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoiceByVersion", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoiceByVersionResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoiceByVersion(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoiceByVersion", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoiceByVersionResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoiceByVersionAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendSupplyViolationPenalty", ReplyAction="http://tempuri.org/IDocumentPortal/SendSupplyViolationPenaltyResponse")]
        EmExServiceClient.DocumentService.OperationResult SendSupplyViolationPenalty(EmExServiceClient.DocumentService.AuthentificationData authentificationData, long userId, string hostName, EmExServiceClient.DocumentService.SupplyViolationPenalty penalty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendSupplyViolationPenalty", ReplyAction="http://tempuri.org/IDocumentPortal/SendSupplyViolationPenaltyResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendSupplyViolationPenaltyAsync(EmExServiceClient.DocumentService.AuthentificationData authentificationData, long userId, string hostName, EmExServiceClient.DocumentService.SupplyViolationPenalty penalty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateTORG12", ReplyAction="http://tempuri.org/IDocumentPortal/CreateTORG12Response")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateTORG12(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, bool isGroupingByBoxNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer, bool additionalColumns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateTORG12", ReplyAction="http://tempuri.org/IDocumentPortal/CreateTORG12Response")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateTORG12Async(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, bool isGroupingByBoxNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer, bool additionalColumns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateTORG2", ReplyAction="http://tempuri.org/IDocumentPortal/CreateTORG2Response")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateTORG2(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateTORG2", ReplyAction="http://tempuri.org/IDocumentPortal/CreateTORG2Response")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateTORG2Async(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateTORG2forVB6", ReplyAction="http://tempuri.org/IDocumentPortal/CreateTORG2forVB6Response")]
        string CreateTORG2forVB6(string invoiceSFLostId, string copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateTORG2forVB6", ReplyAction="http://tempuri.org/IDocumentPortal/CreateTORG2forVB6Response")]
        System.Threading.Tasks.Task<string> CreateTORG2forVB6Async(string invoiceSFLostId, string copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateM15", ReplyAction="http://tempuri.org/IDocumentPortal/CreateM15Response")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateM15(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateM15", ReplyAction="http://tempuri.org/IDocumentPortal/CreateM15Response")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateM15Async(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInfoLost", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInfoLostResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateInfoLost(EmExServiceClient.DocumentService.AuthentificationData sender, long userId, long bookCargoMoscowId, int variantMessage, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInfoLost", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInfoLostResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInfoLostAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long userId, long bookCargoMoscowId, int variantMessage, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCMR", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCMRResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateCMR(EmExServiceClient.DocumentService.AuthentificationData sender, long shippingLinesId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCMR", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCMRResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCMRAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long shippingLinesId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActSurplusTORG2", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActSurplusTORG2Response")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateActSurplusTORG2(EmExServiceClient.DocumentService.AuthentificationData sender, long bookCargoMoscowId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActSurplusTORG2", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActSurplusTORG2Response")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActSurplusTORG2Async(EmExServiceClient.DocumentService.AuthentificationData sender, long bookCargoMoscowId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateM11DemandBill", ReplyAction="http://tempuri.org/IDocumentPortal/CreateM11DemandBillResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateM11DemandBill(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateM11DemandBill", ReplyAction="http://tempuri.org/IDocumentPortal/CreateM11DemandBillResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateM11DemandBillAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateStatement", ReplyAction="http://tempuri.org/IDocumentPortal/CreateStatementResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateStatement(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateStatement", ReplyAction="http://tempuri.org/IDocumentPortal/CreateStatementResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateStatementAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCustomerBarcodeFile", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCustomerBarcodeFileResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateCustomerBarcodeFile(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCustomerBarcodeFile", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCustomerBarcodeFileResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCustomerBarcodeFileAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoiceTypeOne", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoiceTypeOneResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoiceTypeOne(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoiceTypeOne", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoiceTypeOneResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoiceTypeOneAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreatePackSheet", ReplyAction="http://tempuri.org/IDocumentPortal/CreatePackSheetResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreatePackSheet(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, long documentReturnId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreatePackSheet", ReplyAction="http://tempuri.org/IDocumentPortal/CreatePackSheetResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreatePackSheetAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, long documentReturnId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreatePackSheetByFormationId", ReplyAction="http://tempuri.org/IDocumentPortal/CreatePackSheetByFormationIdResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreatePackSheetByFormationId(EmExServiceClient.DocumentService.AuthentificationData sender, long formationId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreatePackSheetByFormationId", ReplyAction="http://tempuri.org/IDocumentPortal/CreatePackSheetByFormationIdResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreatePackSheetByFormationIdAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long formationId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreatePackSheetByTransportCompany", ReplyAction="http://tempuri.org/IDocumentPortal/CreatePackSheetByTransportCompanyResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreatePackSheetByTransportCompany(EmExServiceClient.DocumentService.AuthentificationData sender, string xmlHeader, string xmlData, string customerEmails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreatePackSheetByTransportCompany", ReplyAction="http://tempuri.org/IDocumentPortal/CreatePackSheetByTransportCompanyResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreatePackSheetByTransportCompanyAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string xmlHeader, string xmlData, string customerEmails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateTTN", ReplyAction="http://tempuri.org/IDocumentPortal/CreateTTNResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateTTN(EmExServiceClient.DocumentService.AuthentificationData sender, System.Nullable<long> lotNo, System.Nullable<long> accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateTTN", ReplyAction="http://tempuri.org/IDocumentPortal/CreateTTNResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateTTNAsync(EmExServiceClient.DocumentService.AuthentificationData sender, System.Nullable<long> lotNo, System.Nullable<long> accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInsuranceRequest", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInsuranceRequestResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateInsuranceRequest(EmExServiceClient.DocumentService.AuthentificationData sender, long shippingId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInsuranceRequest", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInsuranceRequestResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInsuranceRequestAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long shippingId, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateBuhAccountPlan", ReplyAction="http://tempuri.org/IDocumentPortal/CreateBuhAccountPlanResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateBuhAccountPlan(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateBuhAccountPlan", ReplyAction="http://tempuri.org/IDocumentPortal/CreateBuhAccountPlanResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateBuhAccountPlanAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateWarehouseReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateWarehouseReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateWarehouseReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, System.DateTime date, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateWarehouseReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateWarehouseReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateWarehouseReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, System.DateTime date, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateGTDToBankReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateGTDToBankReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateGTDToBankReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, System.DateTime date, string passportSdelki, short balance, bool archive, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateGTDToBankReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateGTDToBankReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateGTDToBankReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, System.DateTime date, string passportSdelki, short balance, bool archive, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GTDReportToBankDetailGet", ReplyAction="http://tempuri.org/IDocumentPortal/GTDReportToBankDetailGetResponse")]
        EmExServiceClient.DocumentService.GTDReportToBankDetail[] GTDReportToBankDetailGet(System.DateTime date, string passport, short balanceId, bool archive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GTDReportToBankDetailGet", ReplyAction="http://tempuri.org/IDocumentPortal/GTDReportToBankDetailGetResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.GTDReportToBankDetail[]> GTDReportToBankDetailGetAsync(System.DateTime date, string passport, short balanceId, bool archive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCMR2", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCMR2Response")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateCMR2(EmExServiceClient.DocumentService.AuthentificationData sender, long shippingLinesId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, System.Nullable<long> accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateCMR2", ReplyAction="http://tempuri.org/IDocumentPortal/CreateCMR2Response")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCMR2Async(EmExServiceClient.DocumentService.AuthentificationData sender, long shippingLinesId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, System.Nullable<long> accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetUnlinkedDocumentsForCPD", ReplyAction="http://tempuri.org/IDocumentPortal/GetUnlinkedDocumentsForCPDResponse")]
        EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBankDetail GetUnlinkedDocumentsForCPD(string cpdType, long buhContragentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetUnlinkedDocumentsForCPD", ReplyAction="http://tempuri.org/IDocumentPortal/GetUnlinkedDocumentsForCPDResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBankDetail> GetUnlinkedDocumentsForCPDAsync(string cpdType, long buhContragentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetDocumentsForCPD", ReplyAction="http://tempuri.org/IDocumentPortal/GetDocumentsForCPDResponse")]
        EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBankDetail GetDocumentsForCPD(string cpdType, long buhContragentId, System.DateTime startingDateTime, System.DateTime endingDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetDocumentsForCPD", ReplyAction="http://tempuri.org/IDocumentPortal/GetDocumentsForCPDResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBankDetail> GetDocumentsForCPDAsync(string cpdType, long buhContragentId, System.DateTime startingDateTime, System.DateTime endingDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/UpdateCmrGoodsReceiveDateById", ReplyAction="http://tempuri.org/IDocumentPortal/UpdateCmrGoodsReceiveDateByIdResponse")]
        EmExServiceClient.DocumentService.OperationResult UpdateCmrGoodsReceiveDateById(long userId, int cmrHeaderId, System.Nullable<System.DateTime> goodsReceiveDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/UpdateCmrGoodsReceiveDateById", ReplyAction="http://tempuri.org/IDocumentPortal/UpdateCmrGoodsReceiveDateByIdResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> UpdateCmrGoodsReceiveDateByIdAsync(long userId, int cmrHeaderId, System.Nullable<System.DateTime> goodsReceiveDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/MakeSPD", ReplyAction="http://tempuri.org/IDocumentPortal/MakeSPDResponse")]
        EmExServiceClient.DocumentService.OperationResult MakeSPD(long buhContragentId, string cmrType, int[] cmrsIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/MakeSPD", ReplyAction="http://tempuri.org/IDocumentPortal/MakeSPDResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> MakeSPDAsync(long buhContragentId, string cmrType, int[] cmrsIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetSPDList", ReplyAction="http://tempuri.org/IDocumentPortal/GetSPDListResponse")]
        EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBank GetSPDList(long buhContragentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetSPDList", ReplyAction="http://tempuri.org/IDocumentPortal/GetSPDListResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBank> GetSPDListAsync(long buhContragentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetSPDDetailList", ReplyAction="http://tempuri.org/IDocumentPortal/GetSPDDetailListResponse")]
        EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBankDetail GetSPDDetailList(int SPDId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetSPDDetailList", ReplyAction="http://tempuri.org/IDocumentPortal/GetSPDDetailListResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBankDetail> GetSPDDetailListAsync(int SPDId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateVEDReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateVEDReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateVEDReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int SPDId, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateVEDReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateVEDReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateVEDReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int SPDId, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActRegistrationOnlinePayments", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActRegistrationOnlinePaymentsResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateActRegistrationOnlinePayments(EmExServiceClient.DocumentService.AuthentificationData sender, int balanceId, System.DateTime periodBegin, System.DateTime periodEnd, long contragentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, bool printExisting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActRegistrationOnlinePayments", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActRegistrationOnlinePaymentsResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActRegistrationOnlinePaymentsAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int balanceId, System.DateTime periodBegin, System.DateTime periodEnd, long contragentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, bool printExisting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateSupplierPenaltyReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateSupplierPenaltyReportResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateSupplierPenaltyReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierPenaltyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateSupplierPenaltyReport", ReplyAction="http://tempuri.org/IDocumentPortal/CreateSupplierPenaltyReportResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateSupplierPenaltyReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierPenaltyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateSupplierPenaltyAct", ReplyAction="http://tempuri.org/IDocumentPortal/CreateSupplierPenaltyActResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateSupplierPenaltyAct(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierPenaltyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateSupplierPenaltyAct", ReplyAction="http://tempuri.org/IDocumentPortal/CreateSupplierPenaltyActResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateSupplierPenaltyActAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierPenaltyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendSupplierPenalty", ReplyAction="http://tempuri.org/IDocumentPortal/SendSupplierPenaltyResponse")]
        EmExServiceClient.DocumentService.OperationResult SendSupplierPenalty(EmExServiceClient.DocumentService.AuthentificationData sender, long supplierPenaltyId, long userId, string hostName, string[] emailAdresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendSupplierPenalty", ReplyAction="http://tempuri.org/IDocumentPortal/SendSupplierPenaltyResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendSupplierPenaltyAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long supplierPenaltyId, long userId, string hostName, string[] emailAdresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActTransferringUtil", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActTransferringUtilResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateActTransferringUtil(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long actUtilId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActTransferringUtil", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActTransferringUtilResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActTransferringUtilAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long actUtilId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillSF", ReplyAction="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillSFResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateLocalStorageBillSF(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillSF", ReplyAction="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillSFResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateLocalStorageBillSFAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillAct", ReplyAction="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillActResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateLocalStorageBillAct(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillAct", ReplyAction="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillActResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateLocalStorageBillActAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillVedomost", ReplyAction="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillVedomostResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateLocalStorageBillVedomost(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillVedomost", ReplyAction="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillVedomostResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateLocalStorageBillVedomostAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillSF_v2", ReplyAction="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillSF_v2Response")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateLocalStorageBillSF_v2(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountNewId, long userId, System.DateTime dateTime, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillSF_v2", ReplyAction="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillSF_v2Response")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateLocalStorageBillSF_v2Async(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountNewId, long userId, System.DateTime dateTime, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillAct_v2", ReplyAction="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillAct_v2Response")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateLocalStorageBillAct_v2(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountNewId, long userId, System.DateTime dateTime, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillAct_v2", ReplyAction="http://tempuri.org/IDocumentPortal/CreateLocalStorageBillAct_v2Response")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateLocalStorageBillAct_v2Async(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountNewId, long userId, System.DateTime dateTime, string printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendLocalStorageBillDocuments", ReplyAction="http://tempuri.org/IDocumentPortal/SendLocalStorageBillDocumentsResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles SendLocalStorageBillDocuments(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendLocalStorageBillDocuments", ReplyAction="http://tempuri.org/IDocumentPortal/SendLocalStorageBillDocumentsResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> SendLocalStorageBillDocumentsAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendLocalStorageBillDocumentsOFLS", ReplyAction="http://tempuri.org/IDocumentPortal/SendLocalStorageBillDocumentsOFLSResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles SendLocalStorageBillDocumentsOFLS(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountNewId, long userId, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendLocalStorageBillDocumentsOFLS", ReplyAction="http://tempuri.org/IDocumentPortal/SendLocalStorageBillDocumentsOFLSResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> SendLocalStorageBillDocumentsOFLSAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountNewId, long userId, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendToSpecifiedEmail", ReplyAction="http://tempuri.org/IDocumentPortal/SendToSpecifiedEmailResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles SendToSpecifiedEmail(EmExServiceClient.DocumentService.AuthentificationData sender, long localStorageAccountId, long userId, string[] emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/SendToSpecifiedEmail", ReplyAction="http://tempuri.org/IDocumentPortal/SendToSpecifiedEmailResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> SendToSpecifiedEmailAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long localStorageAccountId, long userId, string[] emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetLocalStorageDocuments_v2", ReplyAction="http://tempuri.org/IDocumentPortal/GetLocalStorageDocuments_v2Response")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetLocalStorageDocuments_v2(EmExServiceClient.DocumentService.AuthentificationData sender, long localStorageAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetLocalStorageDocuments_v2", ReplyAction="http://tempuri.org/IDocumentPortal/GetLocalStorageDocuments_v2Response")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetLocalStorageDocuments_v2Async(EmExServiceClient.DocumentService.AuthentificationData sender, long localStorageAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoicesSFProcessingPayment", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoicesSFProcessingPaymentResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoicesSFProcessingPayment(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long invoicesSFProcessingPaymentId, string[] eMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoicesSFProcessingPayment", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoicesSFProcessingPaymentResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoicesSFProcessingPaymentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long invoicesSFProcessingPaymentId, string[] eMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoicesSFProcessingPaymentAct", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoicesSFProcessingPaymentActResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoicesSFProcessingPaymentAct(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long invoicesSFProcessingPaymentId, string[] eMails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateInvoicesSFProcessingPaymentAct", ReplyAction="http://tempuri.org/IDocumentPortal/CreateInvoicesSFProcessingPaymentActResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoicesSFProcessingPaymentActAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long invoicesSFProcessingPaymentId, string[] eMails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActNotice", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActNoticeResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateActNotice(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierPenaltyId, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateActNotice", ReplyAction="http://tempuri.org/IDocumentPortal/CreateActNoticeResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActNoticeAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierPenaltyId, string printerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateLoadImage", ReplyAction="http://tempuri.org/IDocumentPortal/CreateLoadImageResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles CreateLoadImage(EmExServiceClient.DocumentService.AuthentificationData sender, bool importDetails, bool isDefect, int loadId, System.Tuple<string, string, string>[] clientMessages, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/CreateLoadImage", ReplyAction="http://tempuri.org/IDocumentPortal/CreateLoadImageResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateLoadImageAsync(EmExServiceClient.DocumentService.AuthentificationData sender, bool importDetails, bool isDefect, int loadId, System.Tuple<string, string, string>[] clientMessages, EmExServiceClient.DocumentService.DocumentOptions options, short copies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetUpd", ReplyAction="http://tempuri.org/IDocumentPortal/GetUpdResponse")]
        EmExServiceClient.DocumentService.OperationResultWithFiles GetUpd(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer, short version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDocumentPortal/GetUpd", ReplyAction="http://tempuri.org/IDocumentPortal/GetUpdResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetUpdAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer, short version);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDocumentPortalChannel : EmExServiceClient.DocumentService.IDocumentPortal, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DocumentPortalClient : System.ServiceModel.ClientBase<EmExServiceClient.DocumentService.IDocumentPortal>, EmExServiceClient.DocumentService.IDocumentPortal {
        
        public DocumentPortalClient() {
        }
        
        public DocumentPortalClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DocumentPortalClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DocumentPortalClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DocumentPortalClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetInstalledPrinters() {
            return base.Channel.GetInstalledPrinters();
        }
        
        public System.Threading.Tasks.Task<string[]> GetInstalledPrintersAsync() {
            return base.Channel.GetInstalledPrintersAsync();
        }
        
        public void AddOrUpdateDefaultPrinter(string key, string value) {
            base.Channel.AddOrUpdateDefaultPrinter(key, value);
        }
        
        public System.Threading.Tasks.Task AddOrUpdateDefaultPrinterAsync(string key, string value) {
            return base.Channel.AddOrUpdateDefaultPrinterAsync(key, value);
        }
        
        public string GetDefaultPrinter(string key) {
            return base.Channel.GetDefaultPrinter(key);
        }
        
        public System.Threading.Tasks.Task<string> GetDefaultPrinterAsync(string key) {
            return base.Channel.GetDefaultPrinterAsync(key);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateRevise(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int groupReviseId, System.DateTime dateBegin, System.DateTime dateEnd, string name, string listReport) {
            return base.Channel.CreateRevise(sender, options, groupReviseId, dateBegin, dateEnd, name, listReport);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateReviseAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int groupReviseId, System.DateTime dateBegin, System.DateTime dateEnd, string name, string listReport) {
            return base.Channel.CreateReviseAsync(sender, options, groupReviseId, dateBegin, dateEnd, name, listReport);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateRevisePriceCost(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int RevisePriceCostReportHeaderId) {
            return base.Channel.CreateRevisePriceCost(sender, options, RevisePriceCostReportHeaderId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateRevisePriceCostAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int RevisePriceCostReportHeaderId) {
            return base.Channel.CreateRevisePriceCostAsync(sender, options, RevisePriceCostReportHeaderId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreatePriceListReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, EmExServiceClient.DocumentService.PriceList[] RevisePriceCostList, EmExServiceClient.DocumentService.UserMailing lUm) {
            return base.Channel.CreatePriceListReport(sender, options, RevisePriceCostList, lUm);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreatePriceListReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, EmExServiceClient.DocumentService.PriceList[] RevisePriceCostList, EmExServiceClient.DocumentService.UserMailing lUm) {
            return base.Channel.CreatePriceListReportAsync(sender, options, RevisePriceCostList, lUm);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetUtilDocument(EmExServiceClient.DocumentService.AuthentificationData sender, int actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string version, string printer) {
            return base.Channel.GetUtilDocument(sender, actNumber, options, copies, version, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetUtilDocumentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string version, string printer) {
            return base.Channel.GetUtilDocumentAsync(sender, actNumber, options, copies, version, printer);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetInventoryListReport(EmExServiceClient.DocumentService.AuthentificationData sender, int actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetInventoryListReport(sender, actNumber, options, copies, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInventoryListReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetInventoryListReportAsync(sender, actNumber, options, copies, printer);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreatePreTrialClaim(EmExServiceClient.DocumentService.AuthentificationData sender, long preTrialClaimId, EmExServiceClient.DocumentService.ContragentDebtNotification notification, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.CreatePreTrialClaim(sender, preTrialClaimId, notification, options, copies, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreatePreTrialClaimAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long preTrialClaimId, EmExServiceClient.DocumentService.ContragentDebtNotification notification, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.CreatePreTrialClaimAsync(sender, preTrialClaimId, notification, options, copies, printer);
        }
        
        public EmExServiceClient.DocumentService.InvoiceTypeOneHeader[] GetInvoiceTypeOneHeaders(string customerLogo, byte[] timestamp) {
            return base.Channel.GetInvoiceTypeOneHeaders(customerLogo, timestamp);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.InvoiceTypeOneHeader[]> GetInvoiceTypeOneHeadersAsync(string customerLogo, byte[] timestamp) {
            return base.Channel.GetInvoiceTypeOneHeadersAsync(customerLogo, timestamp);
        }
        
        public EmExServiceClient.DocumentService.InvoiceTypeOneHeader[] GetInvoiceTypeOneHeadersByDates(string customerLogo, System.DateTime dateFrom, System.DateTime dateTo) {
            return base.Channel.GetInvoiceTypeOneHeadersByDates(customerLogo, dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.InvoiceTypeOneHeader[]> GetInvoiceTypeOneHeadersByDatesAsync(string customerLogo, System.DateTime dateFrom, System.DateTime dateTo) {
            return base.Channel.GetInvoiceTypeOneHeadersByDatesAsync(customerLogo, dateFrom, dateTo);
        }
        
        public EmExServiceClient.DocumentService.InvoiceTypeOneDetail[] GetInvoiceTypeOneDetails(int[] ids) {
            return base.Channel.GetInvoiceTypeOneDetails(ids);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.InvoiceTypeOneDetail[]> GetInvoiceTypeOneDetailsAsync(int[] ids) {
            return base.Channel.GetInvoiceTypeOneDetailsAsync(ids);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetInvoiceReturnByQuestionReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long questionId, string documentNumber) {
            return base.Channel.GetInvoiceReturnByQuestionReport(sender, options, questionId, documentNumber);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInvoiceReturnByQuestionReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long questionId, string documentNumber) {
            return base.Channel.GetInvoiceReturnByQuestionReportAsync(sender, options, questionId, documentNumber);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetInvoiceReturnByDefectPreReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, bool isResident, long defectPreId) {
            return base.Channel.GetInvoiceReturnByDefectPreReport(sender, options, isResident, defectPreId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInvoiceReturnByDefectPreReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, bool isResident, long defectPreId) {
            return base.Channel.GetInvoiceReturnByDefectPreReportAsync(sender, options, isResident, defectPreId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetReturnSpecificationNotResidentReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long defectPreId) {
            return base.Channel.GetReturnSpecificationNotResidentReport(sender, options, defectPreId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetReturnSpecificationNotResidentReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long defectPreId) {
            return base.Channel.GetReturnSpecificationNotResidentReportAsync(sender, options, defectPreId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg12WebReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long questionId, string documentNumber, string detailName, string detailNumber) {
            return base.Channel.GetTorg12WebReport(sender, options, questionId, documentNumber, detailName, detailNumber);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg12WebReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long questionId, string documentNumber, string detailName, string detailNumber) {
            return base.Channel.GetTorg12WebReportAsync(sender, options, questionId, documentNumber, detailName, detailNumber);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg12v2WebReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long defectPreId) {
            return base.Channel.GetTorg12v2WebReport(sender, options, defectPreId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg12v2WebReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long defectPreId) {
            return base.Channel.GetTorg12v2WebReportAsync(sender, options, defectPreId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg2WebReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long questionId, string documentNumber, string detailName, string detailNumber) {
            return base.Channel.GetTorg2WebReport(sender, options, questionId, documentNumber, detailName, detailNumber);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg2WebReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long questionId, string documentNumber, string detailName, string detailNumber) {
            return base.Channel.GetTorg2WebReportAsync(sender, options, questionId, documentNumber, detailName, detailNumber);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg2v2WebReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long defectPreId) {
            return base.Channel.GetTorg2v2WebReport(sender, options, defectPreId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg2v2WebReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long defectPreId) {
            return base.Channel.GetTorg2v2WebReportAsync(sender, options, defectPreId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetSuppliersReturnsAuthority(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long supplierId, int suppliersReturnsAuthoritiesId) {
            return base.Channel.GetSuppliersReturnsAuthority(sender, options, supplierId, suppliersReturnsAuthoritiesId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetSuppliersReturnsAuthorityAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long supplierId, int suppliersReturnsAuthoritiesId) {
            return base.Channel.GetSuppliersReturnsAuthorityAsync(sender, options, supplierId, suppliersReturnsAuthoritiesId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateSupplierBonusAct(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierBonusId, string printerName) {
            return base.Channel.CreateSupplierBonusAct(sender, options, copies, supplierBonusId, printerName);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateSupplierBonusActAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierBonusId, string printerName) {
            return base.Channel.CreateSupplierBonusActAsync(sender, options, copies, supplierBonusId, printerName);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateSupplierBonusReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierBonusId, string printerName) {
            return base.Channel.CreateSupplierBonusReport(sender, options, copies, supplierBonusId, printerName);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateSupplierBonusReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierBonusId, string printerName) {
            return base.Channel.CreateSupplierBonusReportAsync(sender, options, copies, supplierBonusId, printerName);
        }
        
        public bool SendSupplierBonusDocuments(long supplierBonusId, string[] emailAddress) {
            return base.Channel.SendSupplierBonusDocuments(supplierBonusId, emailAddress);
        }
        
        public System.Threading.Tasks.Task<bool> SendSupplierBonusDocumentsAsync(long supplierBonusId, string[] emailAddress) {
            return base.Channel.SendSupplierBonusDocumentsAsync(supplierBonusId, emailAddress);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateCustomerSortingServiceAct(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long customerSortingServiceId, string printerName) {
            return base.Channel.CreateCustomerSortingServiceAct(sender, options, copies, customerSortingServiceId, printerName);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCustomerSortingServiceActAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long customerSortingServiceId, string printerName) {
            return base.Channel.CreateCustomerSortingServiceActAsync(sender, options, copies, customerSortingServiceId, printerName);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateCustomerSortingServiceInvoice(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long customerSortingServiceId, string printerName) {
            return base.Channel.CreateCustomerSortingServiceInvoice(sender, options, copies, customerSortingServiceId, printerName);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCustomerSortingServiceInvoiceAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long customerSortingServiceId, string printerName) {
            return base.Channel.CreateCustomerSortingServiceInvoiceAsync(sender, options, copies, customerSortingServiceId, printerName);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateCustomerSortingServiceDetails(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long customerSortingServiceId, string printerName) {
            return base.Channel.CreateCustomerSortingServiceDetails(sender, options, copies, customerSortingServiceId, printerName);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCustomerSortingServiceDetailsAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long customerSortingServiceId, string printerName) {
            return base.Channel.CreateCustomerSortingServiceDetailsAsync(sender, options, copies, customerSortingServiceId, printerName);
        }
        
        public EmExServiceClient.DocumentService.OperationResult SendCustomerSortingServiceDocuments(long customerSortingServiceId, string[] emailAddress) {
            return base.Channel.SendCustomerSortingServiceDocuments(customerSortingServiceId, emailAddress);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendCustomerSortingServiceDocumentsAsync(long customerSortingServiceId, string[] emailAddress) {
            return base.Channel.SendCustomerSortingServiceDocumentsAsync(customerSortingServiceId, emailAddress);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetUpdReturn(EmExServiceClient.DocumentService.AuthentificationData sender, long invoicesSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetUpdReturn(sender, invoicesSFLostId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetUpdReturnAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long invoicesSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetUpdReturnAsync(sender, invoicesSFLostId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetUpdReturnCustomer(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetUpdReturnCustomer(sender, defectPreId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetUpdReturnCustomerAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetUpdReturnCustomerAsync(sender, defectPreId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResult SendDocumentWithMessage(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentType docType, long objectId, string subject, string body, string[] emailAddress) {
            return base.Channel.SendDocumentWithMessage(sender, docType, objectId, subject, body, emailAddress);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendDocumentWithMessageAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentType docType, long objectId, string subject, string body, string[] emailAddress) {
            return base.Channel.SendDocumentWithMessageAsync(sender, docType, objectId, subject, body, emailAddress);
        }
        
        public EmExServiceClient.DocumentService.OperationResult SendDocumentWithMessageSimple(EmExServiceClient.DocumentService.AuthentificationData sender, long objectId) {
            return base.Channel.SendDocumentWithMessageSimple(sender, objectId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendDocumentWithMessageSimpleAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long objectId) {
            return base.Channel.SendDocumentWithMessageSimpleAsync(sender, objectId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetActClaim_v2(EmExServiceClient.DocumentService.AuthentificationData sender, long claimHeaderId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetActClaim_v2(sender, claimHeaderId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetActClaim_v2Async(EmExServiceClient.DocumentService.AuthentificationData sender, long claimHeaderId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetActClaim_v2Async(sender, claimHeaderId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetActClaim_v2_Sheet(EmExServiceClient.DocumentService.AuthentificationData sender, long claimHeaderId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetActClaim_v2_Sheet(sender, claimHeaderId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetActClaim_v2_SheetAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long claimHeaderId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetActClaim_v2_SheetAsync(sender, claimHeaderId, options, copies);
        }
        
        public bool SendReclamationDocuments(long claimHeaderId, string[] emailAddress) {
            return base.Channel.SendReclamationDocuments(claimHeaderId, emailAddress);
        }
        
        public System.Threading.Tasks.Task<bool> SendReclamationDocumentsAsync(long claimHeaderId, string[] emailAddress) {
            return base.Channel.SendReclamationDocumentsAsync(claimHeaderId, emailAddress);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetUkd(EmExServiceClient.DocumentService.AuthentificationData sender, long correctionInvoiceId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version, string printerName) {
            return base.Channel.GetUkd(sender, correctionInvoiceId, options, copies, version, printerName);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetUkdAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long correctionInvoiceId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version, string printerName) {
            return base.Channel.GetUkdAsync(sender, correctionInvoiceId, options, copies, version, printerName);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetClaimHandlingGoodsDocuments(EmExServiceClient.DocumentService.AuthentificationData sender, System.DateTime startingDateTime, System.DateTime endingDateTime, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string messageSubject) {
            return base.Channel.GetClaimHandlingGoodsDocuments(sender, startingDateTime, endingDateTime, options, copies, messageSubject);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetClaimHandlingGoodsDocumentsAsync(EmExServiceClient.DocumentService.AuthentificationData sender, System.DateTime startingDateTime, System.DateTime endingDateTime, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string messageSubject) {
            return base.Channel.GetClaimHandlingGoodsDocumentsAsync(sender, startingDateTime, endingDateTime, options, copies, messageSubject);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetOnlineClientPayment(EmExServiceClient.DocumentService.AuthentificationData sender, long actId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetOnlineClientPayment(sender, actId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetOnlineClientPaymentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long actId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetOnlineClientPaymentAsync(sender, actId, options, copies);
        }
        
        public bool SendOnlineClientPaymentDocuments(long actId, string[] emailAddress) {
            return base.Channel.SendOnlineClientPaymentDocuments(actId, emailAddress);
        }
        
        public System.Threading.Tasks.Task<bool> SendOnlineClientPaymentDocumentsAsync(long actId, string[] emailAddress) {
            return base.Channel.SendOnlineClientPaymentDocumentsAsync(actId, emailAddress);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateTorg12ReturnSupplier(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateTorg12ReturnSupplier(sender, invoiceSFLostId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateTorg12ReturnSupplierAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateTorg12ReturnSupplierAsync(sender, invoiceSFLostId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoiceSupplierRetrun(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version) {
            return base.Channel.CreateInvoiceSupplierRetrun(sender, invoiceSFLostId, options, copies, version);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoiceSupplierRetrunAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version) {
            return base.Channel.CreateInvoiceSupplierRetrunAsync(sender, invoiceSFLostId, options, copies, version);
        }
        
        public EmExServiceClient.DocumentService.OperationResult SendRestickeringPayment(long barcodeProcessingPaymentId, string[] eMail) {
            return base.Channel.SendRestickeringPayment(barcodeProcessingPaymentId, eMail);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendRestickeringPaymentAsync(long barcodeProcessingPaymentId, string[] eMail) {
            return base.Channel.SendRestickeringPaymentAsync(barcodeProcessingPaymentId, eMail);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateRestickeringPaymentDocs(long barcodeProcessingPaymentId) {
            return base.Channel.CreateRestickeringPaymentDocs(barcodeProcessingPaymentId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateRestickeringPaymentDocsAsync(long barcodeProcessingPaymentId) {
            return base.Channel.CreateRestickeringPaymentDocsAsync(barcodeProcessingPaymentId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateStickerDocument(EmExServiceClient.DocumentService.AuthentificationData sender, long reestrObjectId, string logo, string docNumber, string docDate, System.DateTime dateAndTime, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateStickerDocument(sender, reestrObjectId, logo, docNumber, docDate, dateAndTime, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateStickerDocumentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long reestrObjectId, string logo, string docNumber, string docDate, System.DateTime dateAndTime, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateStickerDocumentAsync(sender, reestrObjectId, logo, docNumber, docDate, dateAndTime, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetBccMercShipment(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSfId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetBccMercShipment(sender, invoiceSfId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetBccMercShipmentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSfId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetBccMercShipmentAsync(sender, invoiceSfId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetBccMercReturn(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSfId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetBccMercReturn(sender, invoiceSfId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetBccMercReturnAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSfId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetBccMercReturnAsync(sender, invoiceSfId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg2CustomerReturn(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetTorg2CustomerReturn(sender, defectPreId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg2CustomerReturnAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetTorg2CustomerReturnAsync(sender, defectPreId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg12CustomerReturn(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetTorg12CustomerReturn(sender, defectPreId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg12CustomerReturnAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetTorg12CustomerReturnAsync(sender, defectPreId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg12CustomerReturnExtended(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetTorg12CustomerReturnExtended(sender, defectPreId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg12CustomerReturnExtendedAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetTorg12CustomerReturnExtendedAsync(sender, defectPreId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetInvoiceCustomerReturn(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetInvoiceCustomerReturn(sender, defectPreId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInvoiceCustomerReturnAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetInvoiceCustomerReturnAsync(sender, defectPreId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles SendMeasuredBoxesDataInfo(EmExServiceClient.DocumentService.AuthentificationData sender, string xmlData) {
            return base.Channel.SendMeasuredBoxesDataInfo(sender, xmlData);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> SendMeasuredBoxesDataInfoAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string xmlData) {
            return base.Channel.SendMeasuredBoxesDataInfoAsync(sender, xmlData);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles BalanceCustomerBN(EmExServiceClient.DocumentService.AuthentificationData sender, long customerId, System.Nullable<System.DateTime> dateStart, string customerLogo, System.Nullable<int> balance) {
            return base.Channel.BalanceCustomerBN(sender, customerId, dateStart, customerLogo, balance);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> BalanceCustomerBNAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long customerId, System.Nullable<System.DateTime> dateStart, string customerLogo, System.Nullable<int> balance) {
            return base.Channel.BalanceCustomerBNAsync(sender, customerId, dateStart, customerLogo, balance);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles Inv3(EmExServiceClient.DocumentService.AuthentificationData sender, long reasonObjectId, int reasonTypeId) {
            return base.Channel.Inv3(sender, reasonObjectId, reasonTypeId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> Inv3Async(EmExServiceClient.DocumentService.AuthentificationData sender, long reasonObjectId, int reasonTypeId) {
            return base.Channel.Inv3Async(sender, reasonObjectId, reasonTypeId);
        }
        
        public EmExServiceClient.DocumentService.OperationResult SendEmailsAboutOuterExpertise(EmExServiceClient.DocumentService.AuthentificationData sender) {
            return base.Channel.SendEmailsAboutOuterExpertise(sender);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendEmailsAboutOuterExpertiseAsync(EmExServiceClient.DocumentService.AuthentificationData sender) {
            return base.Channel.SendEmailsAboutOuterExpertiseAsync(sender);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateClaimForCounterfeit(EmExServiceClient.DocumentService.AuthentificationData sender, long claimForCounterfeitHeaderId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateClaimForCounterfeit(sender, claimForCounterfeitHeaderId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateClaimForCounterfeitAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long claimForCounterfeitHeaderId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateClaimForCounterfeitAsync(sender, claimForCounterfeitHeaderId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetInventoryResultDirectiveReport(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetInventoryResultDirectiveReport(sender, inventoriedDocumentId, options, copies, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInventoryResultDirectiveReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetInventoryResultDirectiveReportAsync(sender, inventoriedDocumentId, options, copies, printer);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetInventoryOrderReport(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetInventoryOrderReport(sender, inventoriedDocumentId, options, copies, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInventoryOrderReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetInventoryOrderReportAsync(sender, inventoriedDocumentId, options, copies, printer);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetInventoryRegisterReport(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetInventoryRegisterReport(sender, inventoriedDocumentId, options, copies, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInventoryRegisterReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetInventoryRegisterReportAsync(sender, inventoriedDocumentId, options, copies, printer);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetSupplierReturnsRegisterReport(EmExServiceClient.DocumentService.AuthentificationData sender, int registerId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetSupplierReturnsRegisterReport(sender, registerId, options, copies, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetSupplierReturnsRegisterReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int registerId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetSupplierReturnsRegisterReportAsync(sender, registerId, options, copies, printer);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetInventoryStatementReport(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetInventoryStatementReport(sender, inventoriedDocumentId, options, copies, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetInventoryStatementReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int inventoriedDocumentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetInventoryStatementReportAsync(sender, inventoriedDocumentId, options, copies, printer);
        }
        
        public void PrintRegBoxPackSheet(EmExServiceClient.DocumentService.AuthentificationData sender, string xmlData) {
            base.Channel.PrintRegBoxPackSheet(sender, xmlData);
        }
        
        public System.Threading.Tasks.Task PrintRegBoxPackSheetAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string xmlData) {
            return base.Channel.PrintRegBoxPackSheetAsync(sender, xmlData);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg2V2(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSfLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetTorg2V2(sender, invoiceSfLostId, options, copies, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg2V2Async(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSfLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetTorg2V2Async(sender, invoiceSfLostId, options, copies, printer);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoiceOnlineClientPayment(EmExServiceClient.DocumentService.AuthentificationData sender, long reasonId, EmExServiceClient.DocumentService.DocumentReasonType reasonType, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateInvoiceOnlineClientPayment(sender, reasonId, reasonType, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoiceOnlineClientPaymentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long reasonId, EmExServiceClient.DocumentService.DocumentReasonType reasonType, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateInvoiceOnlineClientPaymentAsync(sender, reasonId, reasonType, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetDueDiligenceReport(EmExServiceClient.DocumentService.AuthentificationData sender, int contragentVerificationId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, bool hasDeclaration, string printer) {
            return base.Channel.GetDueDiligenceReport(sender, contragentVerificationId, options, copies, hasDeclaration, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetDueDiligenceReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int contragentVerificationId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, bool hasDeclaration, string printer) {
            return base.Channel.GetDueDiligenceReportAsync(sender, contragentVerificationId, options, copies, hasDeclaration, printer);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateStickerDocumentByEntityId(EmExServiceClient.DocumentService.AuthentificationData sender, long returnEntityId, int returnEntityType, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateStickerDocumentByEntityId(sender, returnEntityId, returnEntityType, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateStickerDocumentByEntityIdAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long returnEntityId, int returnEntityType, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateStickerDocumentByEntityIdAsync(sender, returnEntityId, returnEntityType, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetTorg2V2ByTorg2Id(EmExServiceClient.DocumentService.AuthentificationData sender, long torg2Id, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetTorg2V2ByTorg2Id(sender, torg2Id, options, copies, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetTorg2V2ByTorg2IdAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long torg2Id, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.GetTorg2V2ByTorg2IdAsync(sender, torg2Id, options, copies, printer);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateCmrByDefectPreId(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateCmrByDefectPreId(sender, defectPreId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCmrByDefectPreIdAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateCmrByDefectPreIdAsync(sender, defectPreId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoiceReturnNonResidentInfo(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateInvoiceReturnNonResidentInfo(sender, defectPreId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoiceReturnNonResidentInfoAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateInvoiceReturnNonResidentInfoAsync(sender, defectPreId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoiceReturnNonResident(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreUnionId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateInvoiceReturnNonResident(sender, defectPreUnionId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoiceReturnNonResidentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreUnionId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateInvoiceReturnNonResidentAsync(sender, defectPreUnionId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateTorg12ReturnNonResident(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreUnionId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateTorg12ReturnNonResident(sender, defectPreUnionId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateTorg12ReturnNonResidentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectPreUnionId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateTorg12ReturnNonResidentAsync(sender, defectPreUnionId, options, copies);
        }
        
        public bool SendLostInfo(EmExServiceClient.DocumentService.AuthentificationData sender, long operatorId, long bookCargoMoscowId, string body, string subject) {
            return base.Channel.SendLostInfo(sender, operatorId, bookCargoMoscowId, body, subject);
        }
        
        public System.Threading.Tasks.Task<bool> SendLostInfoAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long operatorId, long bookCargoMoscowId, string body, string subject) {
            return base.Channel.SendLostInfoAsync(sender, operatorId, bookCargoMoscowId, body, subject);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateBuhSverkaReport(EmExServiceClient.DocumentService.AuthentificationData sender, long buhContragentId, System.DateTime periodStart, System.DateTime periodEnd, string buhSchet, string buhSubSchet, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateBuhSverkaReport(sender, buhContragentId, periodStart, periodEnd, buhSchet, buhSubSchet, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateBuhSverkaReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long buhContragentId, System.DateTime periodStart, System.DateTime periodEnd, string buhSchet, string buhSubSchet, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateBuhSverkaReportAsync(sender, buhContragentId, periodStart, periodEnd, buhSchet, buhSubSchet, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultSverka CreateBuhSverkaReportWithMoney(EmExServiceClient.DocumentService.AuthentificationData sender, long buhContragentId, System.DateTime periodStart, System.DateTime periodEnd, string buhSchet, string buhSubSchet, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateBuhSverkaReportWithMoney(sender, buhContragentId, periodStart, periodEnd, buhSchet, buhSubSchet, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultSverka> CreateBuhSverkaReportWithMoneyAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long buhContragentId, System.DateTime periodStart, System.DateTime periodEnd, string buhSchet, string buhSubSchet, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateBuhSverkaReportWithMoneyAsync(sender, buhContragentId, periodStart, periodEnd, buhSchet, buhSubSchet, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateJointProcessingPaymentDocs(long jointProcessingPaymentId) {
            return base.Channel.CreateJointProcessingPaymentDocs(jointProcessingPaymentId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateJointProcessingPaymentDocsAsync(long jointProcessingPaymentId) {
            return base.Channel.CreateJointProcessingPaymentDocsAsync(jointProcessingPaymentId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateJointProcessingPaymentDocs_v2(EmExServiceClient.DocumentService.AuthentificationData sender, long jointProcessingPaymentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.CreateJointProcessingPaymentDocs_v2(sender, jointProcessingPaymentId, options, copies, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateJointProcessingPaymentDocs_v2Async(EmExServiceClient.DocumentService.AuthentificationData sender, long jointProcessingPaymentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer) {
            return base.Channel.CreateJointProcessingPaymentDocs_v2Async(sender, jointProcessingPaymentId, options, copies, printer);
        }
        
        public EmExServiceClient.DocumentService.OperationResult SendJointProcessingPayment(long jointProcessingPaymentId, string[] eMail) {
            return base.Channel.SendJointProcessingPayment(jointProcessingPaymentId, eMail);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendJointProcessingPaymentAsync(long jointProcessingPaymentId, string[] eMail) {
            return base.Channel.SendJointProcessingPaymentAsync(jointProcessingPaymentId, eMail);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateProtectionFromReturnPaymentDocs(long protectionFromReturnPaymentId) {
            return base.Channel.CreateProtectionFromReturnPaymentDocs(protectionFromReturnPaymentId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateProtectionFromReturnPaymentDocsAsync(long protectionFromReturnPaymentId) {
            return base.Channel.CreateProtectionFromReturnPaymentDocsAsync(protectionFromReturnPaymentId);
        }
        
        public EmExServiceClient.DocumentService.OperationResult SendProtectionFromReturnPayment(long protectionFromReturnPaymentId, string[] eMail) {
            return base.Channel.SendProtectionFromReturnPayment(protectionFromReturnPaymentId, eMail);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendProtectionFromReturnPaymentAsync(long protectionFromReturnPaymentId, string[] eMail) {
            return base.Channel.SendProtectionFromReturnPaymentAsync(protectionFromReturnPaymentId, eMail);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetContrafactList(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetContrafactList(sender, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetContrafactListAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetContrafactListAsync(sender, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles DebtSupplierGet(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int balanceId, System.Nullable<int> contragentId, System.Nullable<System.DateTime> endDate) {
            return base.Channel.DebtSupplierGet(sender, options, balanceId, contragentId, endDate);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> DebtSupplierGetAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int balanceId, System.Nullable<int> contragentId, System.Nullable<System.DateTime> endDate) {
            return base.Channel.DebtSupplierGetAsync(sender, options, balanceId, contragentId, endDate);
        }
        
        public EmExServiceClient.DocumentService.OperationResult SendSupplierReturnsRegisterReport(EmExServiceClient.DocumentService.AuthentificationData sender, int registerId, EmExServiceClient.DocumentService.DocumentOptions options) {
            return base.Channel.SendSupplierReturnsRegisterReport(sender, registerId, options);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendSupplierReturnsRegisterReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int registerId, EmExServiceClient.DocumentService.DocumentOptions options) {
            return base.Channel.SendSupplierReturnsRegisterReportAsync(sender, registerId, options);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles DebtCustomerGet(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int balanceId, System.Nullable<int> contragentId, System.Nullable<System.DateTime> endDate) {
            return base.Channel.DebtCustomerGet(sender, options, balanceId, contragentId, endDate);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> DebtCustomerGetAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int balanceId, System.Nullable<int> contragentId, System.Nullable<System.DateTime> endDate) {
            return base.Channel.DebtCustomerGetAsync(sender, options, balanceId, contragentId, endDate);
        }
        
        public bool SendOF8WebServiceDocuments(long OF8WebServiceId, string[] emailAddress) {
            return base.Channel.SendOF8WebServiceDocuments(OF8WebServiceId, emailAddress);
        }
        
        public System.Threading.Tasks.Task<bool> SendOF8WebServiceDocumentsAsync(long OF8WebServiceId, string[] emailAddress) {
            return base.Channel.SendOF8WebServiceDocumentsAsync(OF8WebServiceId, emailAddress);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetOF8WebServiceDocument(EmExServiceClient.DocumentService.AuthentificationData sender, long OF8WebServiceId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetOF8WebServiceDocument(sender, OF8WebServiceId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetOF8WebServiceDocumentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long OF8WebServiceId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.GetOF8WebServiceDocumentAsync(sender, OF8WebServiceId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetAccountCorrection(EmExServiceClient.DocumentService.AuthentificationData sender, long correctionInvoiceId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printerName) {
            return base.Channel.GetAccountCorrection(sender, correctionInvoiceId, options, copies, printerName);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetAccountCorrectionAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long correctionInvoiceId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printerName) {
            return base.Channel.GetAccountCorrectionAsync(sender, correctionInvoiceId, options, copies, printerName);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetExcelPriceErrors(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long orderInfoId) {
            return base.Channel.GetExcelPriceErrors(sender, options, orderInfoId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetExcelPriceErrorsAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, long orderInfoId) {
            return base.Channel.GetExcelPriceErrorsAsync(sender, options, orderInfoId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateInmotionReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, bool isOpt, System.DateTime dateBegin, System.DateTime dateEnd, long userId, int dateType, int userType, bool bitNotIsRead, int stateParam, bool bitForReports, string queryDetail, bool isLocal, System.Nullable<long> locationId) {
            return base.Channel.CreateInmotionReport(sender, options, isOpt, dateBegin, dateEnd, userId, dateType, userType, bitNotIsRead, stateParam, bitForReports, queryDetail, isLocal, locationId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInmotionReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, bool isOpt, System.DateTime dateBegin, System.DateTime dateEnd, long userId, int dateType, int userType, bool bitNotIsRead, int stateParam, bool bitForReports, string queryDetail, bool isLocal, System.Nullable<long> locationId) {
            return base.Channel.CreateInmotionReportAsync(sender, options, isOpt, dateBegin, dateEnd, userId, dateType, userType, bitNotIsRead, stateParam, bitForReports, queryDetail, isLocal, locationId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateActContrafact(EmExServiceClient.DocumentService.AuthentificationData sender, int contrafactGroupId, bool useFaximille, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printerName, int paymentType) {
            return base.Channel.CreateActContrafact(sender, contrafactGroupId, useFaximille, options, copies, printerName, paymentType);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActContrafactAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int contrafactGroupId, bool useFaximille, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printerName, int paymentType) {
            return base.Channel.CreateActContrafactAsync(sender, contrafactGroupId, useFaximille, options, copies, printerName, paymentType);
        }
        
        public EmExServiceClient.DocumentService.OperationResult SendActContrafact(long contrafactGroupId, int paymentType, string[] eMail) {
            return base.Channel.SendActContrafact(contrafactGroupId, paymentType, eMail);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendActContrafactAsync(long contrafactGroupId, int paymentType, string[] eMail) {
            return base.Channel.SendActContrafactAsync(contrafactGroupId, paymentType, eMail);
        }
        
        public System.Nullable<long> CreateSupplierReturnsActDocument(EmExServiceClient.DocumentService.AuthentificationData sender, string supplierLogo, int userId, string xml) {
            return base.Channel.CreateSupplierReturnsActDocument(sender, supplierLogo, userId, xml);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<long>> CreateSupplierReturnsActDocumentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string supplierLogo, int userId, string xml) {
            return base.Channel.CreateSupplierReturnsActDocumentAsync(sender, supplierLogo, userId, xml);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateSupplierReturnsAct(EmExServiceClient.DocumentService.AuthentificationData sender, long actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateSupplierReturnsAct(sender, actNumber, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateSupplierReturnsActAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateSupplierReturnsActAsync(sender, actNumber, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateCustomerReturnsAct(EmExServiceClient.DocumentService.AuthentificationData sender, long actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateCustomerReturnsAct(sender, actNumber, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCustomerReturnsActAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long actNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateCustomerReturnsActAsync(sender, actNumber, options, copies);
        }
        
        public void IsAlive() {
            base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles PrintActOfAbsence(EmExServiceClient.DocumentService.AuthentificationData sender, string Writer_Post, string Writer_FullFIO, string Worker_Post, string Worker_FullFIO, System.DateTime DateAbsence) {
            return base.Channel.PrintActOfAbsence(sender, Writer_Post, Writer_FullFIO, Worker_Post, Worker_FullFIO, DateAbsence);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> PrintActOfAbsenceAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string Writer_Post, string Writer_FullFIO, string Worker_Post, string Worker_FullFIO, System.DateTime DateAbsence) {
            return base.Channel.PrintActOfAbsenceAsync(sender, Writer_Post, Writer_FullFIO, Worker_Post, Worker_FullFIO, DateAbsence);
        }
        
        public EmExServiceClient.DocumentService.OperationResult PrintPreBillForRegionShipping(EmExServiceClient.DocumentService.AuthentificationData sender, string transportCompanyLogo, short[] routes, string customerLogo) {
            return base.Channel.PrintPreBillForRegionShipping(sender, transportCompanyLogo, routes, customerLogo);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> PrintPreBillForRegionShippingAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string transportCompanyLogo, short[] routes, string customerLogo) {
            return base.Channel.PrintPreBillForRegionShippingAsync(sender, transportCompanyLogo, routes, customerLogo);
        }
        
        public EmExServiceClient.DocumentService.OperationResult PrintBillForRegionShipping(EmExServiceClient.DocumentService.AuthentificationData sender, long lotNo, bool sendMail) {
            return base.Channel.PrintBillForRegionShipping(sender, lotNo, sendMail);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> PrintBillForRegionShippingAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long lotNo, bool sendMail) {
            return base.Channel.PrintBillForRegionShippingAsync(sender, lotNo, sendMail);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles PrintActClaim(EmExServiceClient.DocumentService.AuthentificationData sender, long invoicesSFlostId, long userId) {
            return base.Channel.PrintActClaim(sender, invoicesSFlostId, userId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> PrintActClaimAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long invoicesSFlostId, long userId) {
            return base.Channel.PrintActClaimAsync(sender, invoicesSFlostId, userId);
        }
        
        public EmExServiceClient.DocumentService.OperationResult PrintWaybillForShipping(EmExServiceClient.DocumentService.AuthentificationData sender, long chiefAccountantId, long lotNo) {
            return base.Channel.PrintWaybillForShipping(sender, chiefAccountantId, lotNo);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> PrintWaybillForShippingAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long chiefAccountantId, long lotNo) {
            return base.Channel.PrintWaybillForShippingAsync(sender, chiefAccountantId, lotNo);
        }
        
        public EmExServiceClient.DocumentService.OperationResult AntishippingCloseAction(EmExServiceClient.DocumentService.AuthentificationData sender, long antiShippingId) {
            return base.Channel.AntishippingCloseAction(sender, antiShippingId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> AntishippingCloseActionAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long antiShippingId) {
            return base.Channel.AntishippingCloseActionAsync(sender, antiShippingId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoice(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateInvoice(sender, accountId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoiceAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateInvoiceAsync(sender, accountId, options, copies);
        }
        
        public string StartWatchAccountFile() {
            return base.Channel.StartWatchAccountFile();
        }
        
        public System.Threading.Tasks.Task<string> StartWatchAccountFileAsync() {
            return base.Channel.StartWatchAccountFileAsync();
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateM4(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateM4(sender, invoiceSFId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateM4Async(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateM4Async(sender, invoiceSFId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateActClaim(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateActClaim(sender, invoiceSFLostId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActClaimAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateActClaimAsync(sender, invoiceSFLostId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateActDefectReport(EmExServiceClient.DocumentService.AuthentificationData sender, long defectActsId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateActDefectReport(sender, defectActsId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActDefectReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long defectActsId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateActDefectReportAsync(sender, defectActsId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateActOfAbsence(EmExServiceClient.DocumentService.AuthentificationData sender, string Writer_Post, string Writer_FullFIO, string Worker_Post, string Worker_FullFIO, System.DateTime DateAbsence, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateActOfAbsence(sender, Writer_Post, Writer_FullFIO, Worker_Post, Worker_FullFIO, DateAbsence, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActOfAbsenceAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string Writer_Post, string Writer_FullFIO, string Worker_Post, string Worker_FullFIO, System.DateTime DateAbsence, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateActOfAbsenceAsync(sender, Writer_Post, Writer_FullFIO, Worker_Post, Worker_FullFIO, DateAbsence, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateRegionPackSheet(EmExServiceClient.DocumentService.AuthentificationData sender, long lotNo, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateRegionPackSheet(sender, lotNo, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateRegionPackSheetAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long lotNo, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateRegionPackSheetAsync(sender, lotNo, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateRegionPrePackSheet(EmExServiceClient.DocumentService.AuthentificationData sender, string transportCompanyLogo, short[] routes, string customerLogo, long lotNo, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateRegionPrePackSheet(sender, transportCompanyLogo, routes, customerLogo, lotNo, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateRegionPrePackSheetAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string transportCompanyLogo, short[] routes, string customerLogo, long lotNo, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateRegionPrePackSheetAsync(sender, transportCompanyLogo, routes, customerLogo, lotNo, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoiceByVersion(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version, string printer) {
            return base.Channel.CreateInvoiceByVersion(sender, accountId, options, copies, version, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoiceByVersionAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version, string printer) {
            return base.Channel.CreateInvoiceByVersionAsync(sender, accountId, options, copies, version, printer);
        }
        
        public EmExServiceClient.DocumentService.OperationResult SendSupplyViolationPenalty(EmExServiceClient.DocumentService.AuthentificationData authentificationData, long userId, string hostName, EmExServiceClient.DocumentService.SupplyViolationPenalty penalty) {
            return base.Channel.SendSupplyViolationPenalty(authentificationData, userId, hostName, penalty);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendSupplyViolationPenaltyAsync(EmExServiceClient.DocumentService.AuthentificationData authentificationData, long userId, string hostName, EmExServiceClient.DocumentService.SupplyViolationPenalty penalty) {
            return base.Channel.SendSupplyViolationPenaltyAsync(authentificationData, userId, hostName, penalty);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateTORG12(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, bool isGroupingByBoxNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer, bool additionalColumns) {
            return base.Channel.CreateTORG12(sender, accountId, isGroupingByBoxNumber, options, copies, printer, additionalColumns);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateTORG12Async(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, bool isGroupingByBoxNumber, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer, bool additionalColumns) {
            return base.Channel.CreateTORG12Async(sender, accountId, isGroupingByBoxNumber, options, copies, printer, additionalColumns);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateTORG2(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateTORG2(sender, invoiceSFLostId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateTORG2Async(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateTORG2Async(sender, invoiceSFLostId, options, copies);
        }
        
        public string CreateTORG2forVB6(string invoiceSFLostId, string copies) {
            return base.Channel.CreateTORG2forVB6(invoiceSFLostId, copies);
        }
        
        public System.Threading.Tasks.Task<string> CreateTORG2forVB6Async(string invoiceSFLostId, string copies) {
            return base.Channel.CreateTORG2forVB6Async(invoiceSFLostId, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateM15(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateM15(sender, invoiceSFLostId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateM15Async(EmExServiceClient.DocumentService.AuthentificationData sender, long invoiceSFLostId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateM15Async(sender, invoiceSFLostId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateInfoLost(EmExServiceClient.DocumentService.AuthentificationData sender, long userId, long bookCargoMoscowId, int variantMessage, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateInfoLost(sender, userId, bookCargoMoscowId, variantMessage, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInfoLostAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long userId, long bookCargoMoscowId, int variantMessage, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateInfoLostAsync(sender, userId, bookCargoMoscowId, variantMessage, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateCMR(EmExServiceClient.DocumentService.AuthentificationData sender, long shippingLinesId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateCMR(sender, shippingLinesId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCMRAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long shippingLinesId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateCMRAsync(sender, shippingLinesId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateActSurplusTORG2(EmExServiceClient.DocumentService.AuthentificationData sender, long bookCargoMoscowId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateActSurplusTORG2(sender, bookCargoMoscowId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActSurplusTORG2Async(EmExServiceClient.DocumentService.AuthentificationData sender, long bookCargoMoscowId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateActSurplusTORG2Async(sender, bookCargoMoscowId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateM11DemandBill(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateM11DemandBill(sender, accountId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateM11DemandBillAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateM11DemandBillAsync(sender, accountId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateStatement(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateStatement(sender, accountId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateStatementAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateStatementAsync(sender, accountId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateCustomerBarcodeFile(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateCustomerBarcodeFile(sender, accountId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCustomerBarcodeFileAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateCustomerBarcodeFileAsync(sender, accountId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoiceTypeOne(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateInvoiceTypeOne(sender, accountId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoiceTypeOneAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateInvoiceTypeOneAsync(sender, accountId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreatePackSheet(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, long documentReturnId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version) {
            return base.Channel.CreatePackSheet(sender, accountId, documentReturnId, options, copies, version);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreatePackSheetAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, long documentReturnId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version) {
            return base.Channel.CreatePackSheetAsync(sender, accountId, documentReturnId, options, copies, version);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreatePackSheetByFormationId(EmExServiceClient.DocumentService.AuthentificationData sender, long formationId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version) {
            return base.Channel.CreatePackSheetByFormationId(sender, formationId, options, copies, version);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreatePackSheetByFormationIdAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long formationId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, ushort version) {
            return base.Channel.CreatePackSheetByFormationIdAsync(sender, formationId, options, copies, version);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreatePackSheetByTransportCompany(EmExServiceClient.DocumentService.AuthentificationData sender, string xmlHeader, string xmlData, string customerEmails) {
            return base.Channel.CreatePackSheetByTransportCompany(sender, xmlHeader, xmlData, customerEmails);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreatePackSheetByTransportCompanyAsync(EmExServiceClient.DocumentService.AuthentificationData sender, string xmlHeader, string xmlData, string customerEmails) {
            return base.Channel.CreatePackSheetByTransportCompanyAsync(sender, xmlHeader, xmlData, customerEmails);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateTTN(EmExServiceClient.DocumentService.AuthentificationData sender, System.Nullable<long> lotNo, System.Nullable<long> accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateTTN(sender, lotNo, accountId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateTTNAsync(EmExServiceClient.DocumentService.AuthentificationData sender, System.Nullable<long> lotNo, System.Nullable<long> accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateTTNAsync(sender, lotNo, accountId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateInsuranceRequest(EmExServiceClient.DocumentService.AuthentificationData sender, long shippingId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateInsuranceRequest(sender, shippingId, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInsuranceRequestAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long shippingId, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateInsuranceRequestAsync(sender, shippingId, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateBuhAccountPlan(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateBuhAccountPlan(sender, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateBuhAccountPlanAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateBuhAccountPlanAsync(sender, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateWarehouseReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, System.DateTime date, short copies) {
            return base.Channel.CreateWarehouseReport(sender, options, date, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateWarehouseReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, System.DateTime date, short copies) {
            return base.Channel.CreateWarehouseReportAsync(sender, options, date, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateGTDToBankReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, System.DateTime date, string passportSdelki, short balance, bool archive, short copies) {
            return base.Channel.CreateGTDToBankReport(sender, options, date, passportSdelki, balance, archive, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateGTDToBankReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, System.DateTime date, string passportSdelki, short balance, bool archive, short copies) {
            return base.Channel.CreateGTDToBankReportAsync(sender, options, date, passportSdelki, balance, archive, copies);
        }
        
        public EmExServiceClient.DocumentService.GTDReportToBankDetail[] GTDReportToBankDetailGet(System.DateTime date, string passport, short balanceId, bool archive) {
            return base.Channel.GTDReportToBankDetailGet(date, passport, balanceId, archive);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.GTDReportToBankDetail[]> GTDReportToBankDetailGetAsync(System.DateTime date, string passport, short balanceId, bool archive) {
            return base.Channel.GTDReportToBankDetailGetAsync(date, passport, balanceId, archive);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateCMR2(EmExServiceClient.DocumentService.AuthentificationData sender, long shippingLinesId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, System.Nullable<long> accountId) {
            return base.Channel.CreateCMR2(sender, shippingLinesId, options, copies, accountId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateCMR2Async(EmExServiceClient.DocumentService.AuthentificationData sender, long shippingLinesId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, System.Nullable<long> accountId) {
            return base.Channel.CreateCMR2Async(sender, shippingLinesId, options, copies, accountId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBankDetail GetUnlinkedDocumentsForCPD(string cpdType, long buhContragentId) {
            return base.Channel.GetUnlinkedDocumentsForCPD(cpdType, buhContragentId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBankDetail> GetUnlinkedDocumentsForCPDAsync(string cpdType, long buhContragentId) {
            return base.Channel.GetUnlinkedDocumentsForCPDAsync(cpdType, buhContragentId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBankDetail GetDocumentsForCPD(string cpdType, long buhContragentId, System.DateTime startingDateTime, System.DateTime endingDateTime) {
            return base.Channel.GetDocumentsForCPD(cpdType, buhContragentId, startingDateTime, endingDateTime);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBankDetail> GetDocumentsForCPDAsync(string cpdType, long buhContragentId, System.DateTime startingDateTime, System.DateTime endingDateTime) {
            return base.Channel.GetDocumentsForCPDAsync(cpdType, buhContragentId, startingDateTime, endingDateTime);
        }
        
        public EmExServiceClient.DocumentService.OperationResult UpdateCmrGoodsReceiveDateById(long userId, int cmrHeaderId, System.Nullable<System.DateTime> goodsReceiveDate) {
            return base.Channel.UpdateCmrGoodsReceiveDateById(userId, cmrHeaderId, goodsReceiveDate);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> UpdateCmrGoodsReceiveDateByIdAsync(long userId, int cmrHeaderId, System.Nullable<System.DateTime> goodsReceiveDate) {
            return base.Channel.UpdateCmrGoodsReceiveDateByIdAsync(userId, cmrHeaderId, goodsReceiveDate);
        }
        
        public EmExServiceClient.DocumentService.OperationResult MakeSPD(long buhContragentId, string cmrType, int[] cmrsIDs) {
            return base.Channel.MakeSPD(buhContragentId, cmrType, cmrsIDs);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> MakeSPDAsync(long buhContragentId, string cmrType, int[] cmrsIDs) {
            return base.Channel.MakeSPDAsync(buhContragentId, cmrType, cmrsIDs);
        }
        
        public EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBank GetSPDList(long buhContragentId) {
            return base.Channel.GetSPDList(buhContragentId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBank> GetSPDListAsync(long buhContragentId) {
            return base.Channel.GetSPDListAsync(buhContragentId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBankDetail GetSPDDetailList(int SPDId) {
            return base.Channel.GetSPDDetailList(SPDId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultArrayOfVEDReportToBankDetail> GetSPDDetailListAsync(int SPDId) {
            return base.Channel.GetSPDDetailListAsync(SPDId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateVEDReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int SPDId, short copies) {
            return base.Channel.CreateVEDReport(sender, options, SPDId, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateVEDReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, int SPDId, short copies) {
            return base.Channel.CreateVEDReportAsync(sender, options, SPDId, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateActRegistrationOnlinePayments(EmExServiceClient.DocumentService.AuthentificationData sender, int balanceId, System.DateTime periodBegin, System.DateTime periodEnd, long contragentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, bool printExisting) {
            return base.Channel.CreateActRegistrationOnlinePayments(sender, balanceId, periodBegin, periodEnd, contragentId, options, copies, printExisting);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActRegistrationOnlinePaymentsAsync(EmExServiceClient.DocumentService.AuthentificationData sender, int balanceId, System.DateTime periodBegin, System.DateTime periodEnd, long contragentId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, bool printExisting) {
            return base.Channel.CreateActRegistrationOnlinePaymentsAsync(sender, balanceId, periodBegin, periodEnd, contragentId, options, copies, printExisting);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateSupplierPenaltyReport(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierPenaltyId) {
            return base.Channel.CreateSupplierPenaltyReport(sender, options, copies, supplierPenaltyId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateSupplierPenaltyReportAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierPenaltyId) {
            return base.Channel.CreateSupplierPenaltyReportAsync(sender, options, copies, supplierPenaltyId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateSupplierPenaltyAct(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierPenaltyId) {
            return base.Channel.CreateSupplierPenaltyAct(sender, options, copies, supplierPenaltyId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateSupplierPenaltyActAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierPenaltyId) {
            return base.Channel.CreateSupplierPenaltyActAsync(sender, options, copies, supplierPenaltyId);
        }
        
        public EmExServiceClient.DocumentService.OperationResult SendSupplierPenalty(EmExServiceClient.DocumentService.AuthentificationData sender, long supplierPenaltyId, long userId, string hostName, string[] emailAdresses) {
            return base.Channel.SendSupplierPenalty(sender, supplierPenaltyId, userId, hostName, emailAdresses);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResult> SendSupplierPenaltyAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long supplierPenaltyId, long userId, string hostName, string[] emailAdresses) {
            return base.Channel.SendSupplierPenaltyAsync(sender, supplierPenaltyId, userId, hostName, emailAdresses);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateActTransferringUtil(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long actUtilId) {
            return base.Channel.CreateActTransferringUtil(sender, options, copies, actUtilId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActTransferringUtilAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long actUtilId) {
            return base.Channel.CreateActTransferringUtilAsync(sender, options, copies, actUtilId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateLocalStorageBillSF(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime) {
            return base.Channel.CreateLocalStorageBillSF(sender, options, copies, localStorageAccountId, userId, dateTime);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateLocalStorageBillSFAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime) {
            return base.Channel.CreateLocalStorageBillSFAsync(sender, options, copies, localStorageAccountId, userId, dateTime);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateLocalStorageBillAct(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime) {
            return base.Channel.CreateLocalStorageBillAct(sender, options, copies, localStorageAccountId, userId, dateTime);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateLocalStorageBillActAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime) {
            return base.Channel.CreateLocalStorageBillActAsync(sender, options, copies, localStorageAccountId, userId, dateTime);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateLocalStorageBillVedomost(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime) {
            return base.Channel.CreateLocalStorageBillVedomost(sender, options, copies, localStorageAccountId, userId, dateTime);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateLocalStorageBillVedomostAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime) {
            return base.Channel.CreateLocalStorageBillVedomostAsync(sender, options, copies, localStorageAccountId, userId, dateTime);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateLocalStorageBillSF_v2(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountNewId, long userId, System.DateTime dateTime, string printer) {
            return base.Channel.CreateLocalStorageBillSF_v2(sender, options, copies, localStorageAccountNewId, userId, dateTime, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateLocalStorageBillSF_v2Async(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountNewId, long userId, System.DateTime dateTime, string printer) {
            return base.Channel.CreateLocalStorageBillSF_v2Async(sender, options, copies, localStorageAccountNewId, userId, dateTime, printer);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateLocalStorageBillAct_v2(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountNewId, long userId, System.DateTime dateTime, string printer) {
            return base.Channel.CreateLocalStorageBillAct_v2(sender, options, copies, localStorageAccountNewId, userId, dateTime, printer);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateLocalStorageBillAct_v2Async(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountNewId, long userId, System.DateTime dateTime, string printer) {
            return base.Channel.CreateLocalStorageBillAct_v2Async(sender, options, copies, localStorageAccountNewId, userId, dateTime, printer);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles SendLocalStorageBillDocuments(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime) {
            return base.Channel.SendLocalStorageBillDocuments(sender, options, copies, localStorageAccountId, userId, dateTime);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> SendLocalStorageBillDocumentsAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountId, long userId, System.DateTime dateTime) {
            return base.Channel.SendLocalStorageBillDocumentsAsync(sender, options, copies, localStorageAccountId, userId, dateTime);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles SendLocalStorageBillDocumentsOFLS(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountNewId, long userId, System.DateTime dateTime) {
            return base.Channel.SendLocalStorageBillDocumentsOFLS(sender, options, copies, localStorageAccountNewId, userId, dateTime);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> SendLocalStorageBillDocumentsOFLSAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long localStorageAccountNewId, long userId, System.DateTime dateTime) {
            return base.Channel.SendLocalStorageBillDocumentsOFLSAsync(sender, options, copies, localStorageAccountNewId, userId, dateTime);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles SendToSpecifiedEmail(EmExServiceClient.DocumentService.AuthentificationData sender, long localStorageAccountId, long userId, string[] emailAddress) {
            return base.Channel.SendToSpecifiedEmail(sender, localStorageAccountId, userId, emailAddress);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> SendToSpecifiedEmailAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long localStorageAccountId, long userId, string[] emailAddress) {
            return base.Channel.SendToSpecifiedEmailAsync(sender, localStorageAccountId, userId, emailAddress);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetLocalStorageDocuments_v2(EmExServiceClient.DocumentService.AuthentificationData sender, long localStorageAccountId) {
            return base.Channel.GetLocalStorageDocuments_v2(sender, localStorageAccountId);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetLocalStorageDocuments_v2Async(EmExServiceClient.DocumentService.AuthentificationData sender, long localStorageAccountId) {
            return base.Channel.GetLocalStorageDocuments_v2Async(sender, localStorageAccountId);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoicesSFProcessingPayment(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long invoicesSFProcessingPaymentId, string[] eMail) {
            return base.Channel.CreateInvoicesSFProcessingPayment(sender, options, copies, invoicesSFProcessingPaymentId, eMail);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoicesSFProcessingPaymentAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long invoicesSFProcessingPaymentId, string[] eMail) {
            return base.Channel.CreateInvoicesSFProcessingPaymentAsync(sender, options, copies, invoicesSFProcessingPaymentId, eMail);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateInvoicesSFProcessingPaymentAct(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long invoicesSFProcessingPaymentId, string[] eMails) {
            return base.Channel.CreateInvoicesSFProcessingPaymentAct(sender, options, copies, invoicesSFProcessingPaymentId, eMails);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateInvoicesSFProcessingPaymentActAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long invoicesSFProcessingPaymentId, string[] eMails) {
            return base.Channel.CreateInvoicesSFProcessingPaymentActAsync(sender, options, copies, invoicesSFProcessingPaymentId, eMails);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateActNotice(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierPenaltyId, string printerName) {
            return base.Channel.CreateActNotice(sender, options, copies, supplierPenaltyId, printerName);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateActNoticeAsync(EmExServiceClient.DocumentService.AuthentificationData sender, EmExServiceClient.DocumentService.DocumentOptions options, short copies, long supplierPenaltyId, string printerName) {
            return base.Channel.CreateActNoticeAsync(sender, options, copies, supplierPenaltyId, printerName);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles CreateLoadImage(EmExServiceClient.DocumentService.AuthentificationData sender, bool importDetails, bool isDefect, int loadId, System.Tuple<string, string, string>[] clientMessages, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateLoadImage(sender, importDetails, isDefect, loadId, clientMessages, options, copies);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> CreateLoadImageAsync(EmExServiceClient.DocumentService.AuthentificationData sender, bool importDetails, bool isDefect, int loadId, System.Tuple<string, string, string>[] clientMessages, EmExServiceClient.DocumentService.DocumentOptions options, short copies) {
            return base.Channel.CreateLoadImageAsync(sender, importDetails, isDefect, loadId, clientMessages, options, copies);
        }
        
        public EmExServiceClient.DocumentService.OperationResultWithFiles GetUpd(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer, short version) {
            return base.Channel.GetUpd(sender, accountId, options, copies, printer, version);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.DocumentService.OperationResultWithFiles> GetUpdAsync(EmExServiceClient.DocumentService.AuthentificationData sender, long accountId, EmExServiceClient.DocumentService.DocumentOptions options, short copies, string printer, short version) {
            return base.Channel.GetUpdAsync(sender, accountId, options, copies, printer, version);
        }
    }
}
