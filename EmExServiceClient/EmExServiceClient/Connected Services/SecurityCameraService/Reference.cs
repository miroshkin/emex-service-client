//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmExServiceClient.SecurityCameraService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Camera", Namespace="http://schemas.datacontract.org/2004/07/SecurityCamera.Entities")]
    [System.SerializableAttribute()]
    public partial class Camera : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmExServiceClient.SecurityCameraService.Binding[] BindingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CameraIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmExServiceClient.SecurityCameraService.Binding[] Bindings {
            get {
                return this.BindingsField;
            }
            set {
                if ((object.ReferenceEquals(this.BindingsField, value) != true)) {
                    this.BindingsField = value;
                    this.RaisePropertyChanged("Bindings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CameraId {
            get {
                return this.CameraIdField;
            }
            set {
                if ((this.CameraIdField.Equals(value) != true)) {
                    this.CameraIdField = value;
                    this.RaisePropertyChanged("CameraId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Binding", Namespace="http://schemas.datacontract.org/2004/07/SecurityCamera.Entities")]
    [System.SerializableAttribute()]
    public partial class Binding : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BindingIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BindingId {
            get {
                return this.BindingIdField;
            }
            set {
                if ((this.BindingIdField.Equals(value) != true)) {
                    this.BindingIdField = value;
                    this.RaisePropertyChanged("BindingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SecurityCameraService.ISecurityCameraService")]
    public interface ISecurityCameraService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/GetCameras", ReplyAction="http://tempuri.org/ISecurityCameraService/GetCamerasResponse")]
        EmExServiceClient.SecurityCameraService.Camera[] GetCameras();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/GetCameras", ReplyAction="http://tempuri.org/ISecurityCameraService/GetCamerasResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.SecurityCameraService.Camera[]> GetCamerasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/AddCamera", ReplyAction="http://tempuri.org/ISecurityCameraService/AddCameraResponse")]
        EmExServiceClient.SecurityCameraService.Camera AddCamera(EmExServiceClient.SecurityCameraService.Camera camera);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/AddCamera", ReplyAction="http://tempuri.org/ISecurityCameraService/AddCameraResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.SecurityCameraService.Camera> AddCameraAsync(EmExServiceClient.SecurityCameraService.Camera camera);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/DeleteCamera", ReplyAction="http://tempuri.org/ISecurityCameraService/DeleteCameraResponse")]
        void DeleteCamera(string cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/DeleteCamera", ReplyAction="http://tempuri.org/ISecurityCameraService/DeleteCameraResponse")]
        System.Threading.Tasks.Task DeleteCameraAsync(string cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/UpdateCamera", ReplyAction="http://tempuri.org/ISecurityCameraService/UpdateCameraResponse")]
        EmExServiceClient.SecurityCameraService.Camera UpdateCamera(EmExServiceClient.SecurityCameraService.Camera camera);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/UpdateCamera", ReplyAction="http://tempuri.org/ISecurityCameraService/UpdateCameraResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.SecurityCameraService.Camera> UpdateCameraAsync(EmExServiceClient.SecurityCameraService.Camera camera);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/GetBindings", ReplyAction="http://tempuri.org/ISecurityCameraService/GetBindingsResponse")]
        EmExServiceClient.SecurityCameraService.Binding[] GetBindings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/GetBindings", ReplyAction="http://tempuri.org/ISecurityCameraService/GetBindingsResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.SecurityCameraService.Binding[]> GetBindingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/AddBinding", ReplyAction="http://tempuri.org/ISecurityCameraService/AddBindingResponse")]
        EmExServiceClient.SecurityCameraService.Binding AddBinding(EmExServiceClient.SecurityCameraService.Binding binding);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/AddBinding", ReplyAction="http://tempuri.org/ISecurityCameraService/AddBindingResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.SecurityCameraService.Binding> AddBindingAsync(EmExServiceClient.SecurityCameraService.Binding binding);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/DeleteBinding", ReplyAction="http://tempuri.org/ISecurityCameraService/DeleteBindingResponse")]
        void DeleteBinding(string bindingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/DeleteBinding", ReplyAction="http://tempuri.org/ISecurityCameraService/DeleteBindingResponse")]
        System.Threading.Tasks.Task DeleteBindingAsync(string bindingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/UpdateBinding", ReplyAction="http://tempuri.org/ISecurityCameraService/UpdateBindingResponse")]
        EmExServiceClient.SecurityCameraService.Binding UpdateBinding(EmExServiceClient.SecurityCameraService.Binding binding);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/UpdateBinding", ReplyAction="http://tempuri.org/ISecurityCameraService/UpdateBindingResponse")]
        System.Threading.Tasks.Task<EmExServiceClient.SecurityCameraService.Binding> UpdateBindingAsync(EmExServiceClient.SecurityCameraService.Binding binding);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/SendCameraData", ReplyAction="http://tempuri.org/ISecurityCameraService/SendCameraDataResponse")]
        void SendCameraData(string hostName, string user, int cameraId, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/SendCameraData", ReplyAction="http://tempuri.org/ISecurityCameraService/SendCameraDataResponse")]
        System.Threading.Tasks.Task SendCameraDataAsync(string hostName, string user, int cameraId, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/SendBindingData", ReplyAction="http://tempuri.org/ISecurityCameraService/SendBindingDataResponse")]
        void SendBindingData(string hostName, string user, string bindingCode, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/SendBindingData", ReplyAction="http://tempuri.org/ISecurityCameraService/SendBindingDataResponse")]
        System.Threading.Tasks.Task SendBindingDataAsync(string hostName, string user, string bindingCode, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/SendData", ReplyAction="http://tempuri.org/ISecurityCameraService/SendDataResponse")]
        void SendData(string hostName, string user, string bindingCode, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/SendData", ReplyAction="http://tempuri.org/ISecurityCameraService/SendDataResponse")]
        System.Threading.Tasks.Task SendDataAsync(string hostName, string user, string bindingCode, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/LogProcess", ReplyAction="http://tempuri.org/ISecurityCameraService/LogProcessResponse")]
        void LogProcess(string logProcessTypeCode, string logObjectKey, string bindingCode, string hostName, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/LogProcess", ReplyAction="http://tempuri.org/ISecurityCameraService/LogProcessResponse")]
        System.Threading.Tasks.Task LogProcessAsync(string logProcessTypeCode, string logObjectKey, string bindingCode, string hostName, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/CreateUnloadVideoFragmentsTask", ReplyAction="http://tempuri.org/ISecurityCameraService/CreateUnloadVideoFragmentsTaskResponse")]
        void CreateUnloadVideoFragmentsTask(string securityCameraProcessLogTypeCode, string logObjectKey, string entityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/CreateUnloadVideoFragmentsTask", ReplyAction="http://tempuri.org/ISecurityCameraService/CreateUnloadVideoFragmentsTaskResponse")]
        System.Threading.Tasks.Task CreateUnloadVideoFragmentsTaskAsync(string securityCameraProcessLogTypeCode, string logObjectKey, string entityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/CreateUnloadAndSendVideoTask", ReplyAction="http://tempuri.org/ISecurityCameraService/CreateUnloadAndSendVideoTaskResponse")]
        void CreateUnloadAndSendVideoTask(string securityCameraProcessLogTypeCode, string logObjectKey, string supplierLogo, string notificationEmails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/CreateUnloadAndSendVideoTask", ReplyAction="http://tempuri.org/ISecurityCameraService/CreateUnloadAndSendVideoTaskResponse")]
        System.Threading.Tasks.Task CreateUnloadAndSendVideoTaskAsync(string securityCameraProcessLogTypeCode, string logObjectKey, string supplierLogo, string notificationEmails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/StartSendVideoProcessing", ReplyAction="http://tempuri.org/ISecurityCameraService/StartSendVideoProcessingResponse")]
        void StartSendVideoProcessing();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/StartSendVideoProcessing", ReplyAction="http://tempuri.org/ISecurityCameraService/StartSendVideoProcessingResponse")]
        System.Threading.Tasks.Task StartSendVideoProcessingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/StopSendVideoProcessing", ReplyAction="http://tempuri.org/ISecurityCameraService/StopSendVideoProcessingResponse")]
        void StopSendVideoProcessing();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/StopSendVideoProcessing", ReplyAction="http://tempuri.org/ISecurityCameraService/StopSendVideoProcessingResponse")]
        System.Threading.Tasks.Task StopSendVideoProcessingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/IsSendVideoProcessingStarted", ReplyAction="http://tempuri.org/ISecurityCameraService/IsSendVideoProcessingStartedResponse")]
        bool IsSendVideoProcessingStarted();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityCameraService/IsSendVideoProcessingStarted", ReplyAction="http://tempuri.org/ISecurityCameraService/IsSendVideoProcessingStartedResponse")]
        System.Threading.Tasks.Task<bool> IsSendVideoProcessingStartedAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISecurityCameraServiceChannel : EmExServiceClient.SecurityCameraService.ISecurityCameraService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SecurityCameraServiceClient : System.ServiceModel.ClientBase<EmExServiceClient.SecurityCameraService.ISecurityCameraService>, EmExServiceClient.SecurityCameraService.ISecurityCameraService {
        
        public SecurityCameraServiceClient() {
        }
        
        public SecurityCameraServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SecurityCameraServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecurityCameraServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecurityCameraServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EmExServiceClient.SecurityCameraService.Camera[] GetCameras() {
            return base.Channel.GetCameras();
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.SecurityCameraService.Camera[]> GetCamerasAsync() {
            return base.Channel.GetCamerasAsync();
        }
        
        public EmExServiceClient.SecurityCameraService.Camera AddCamera(EmExServiceClient.SecurityCameraService.Camera camera) {
            return base.Channel.AddCamera(camera);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.SecurityCameraService.Camera> AddCameraAsync(EmExServiceClient.SecurityCameraService.Camera camera) {
            return base.Channel.AddCameraAsync(camera);
        }
        
        public void DeleteCamera(string cameraId) {
            base.Channel.DeleteCamera(cameraId);
        }
        
        public System.Threading.Tasks.Task DeleteCameraAsync(string cameraId) {
            return base.Channel.DeleteCameraAsync(cameraId);
        }
        
        public EmExServiceClient.SecurityCameraService.Camera UpdateCamera(EmExServiceClient.SecurityCameraService.Camera camera) {
            return base.Channel.UpdateCamera(camera);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.SecurityCameraService.Camera> UpdateCameraAsync(EmExServiceClient.SecurityCameraService.Camera camera) {
            return base.Channel.UpdateCameraAsync(camera);
        }
        
        public EmExServiceClient.SecurityCameraService.Binding[] GetBindings() {
            return base.Channel.GetBindings();
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.SecurityCameraService.Binding[]> GetBindingsAsync() {
            return base.Channel.GetBindingsAsync();
        }
        
        public EmExServiceClient.SecurityCameraService.Binding AddBinding(EmExServiceClient.SecurityCameraService.Binding binding) {
            return base.Channel.AddBinding(binding);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.SecurityCameraService.Binding> AddBindingAsync(EmExServiceClient.SecurityCameraService.Binding binding) {
            return base.Channel.AddBindingAsync(binding);
        }
        
        public void DeleteBinding(string bindingId) {
            base.Channel.DeleteBinding(bindingId);
        }
        
        public System.Threading.Tasks.Task DeleteBindingAsync(string bindingId) {
            return base.Channel.DeleteBindingAsync(bindingId);
        }
        
        public EmExServiceClient.SecurityCameraService.Binding UpdateBinding(EmExServiceClient.SecurityCameraService.Binding binding) {
            return base.Channel.UpdateBinding(binding);
        }
        
        public System.Threading.Tasks.Task<EmExServiceClient.SecurityCameraService.Binding> UpdateBindingAsync(EmExServiceClient.SecurityCameraService.Binding binding) {
            return base.Channel.UpdateBindingAsync(binding);
        }
        
        public void SendCameraData(string hostName, string user, int cameraId, string data) {
            base.Channel.SendCameraData(hostName, user, cameraId, data);
        }
        
        public System.Threading.Tasks.Task SendCameraDataAsync(string hostName, string user, int cameraId, string data) {
            return base.Channel.SendCameraDataAsync(hostName, user, cameraId, data);
        }
        
        public void SendBindingData(string hostName, string user, string bindingCode, string data) {
            base.Channel.SendBindingData(hostName, user, bindingCode, data);
        }
        
        public System.Threading.Tasks.Task SendBindingDataAsync(string hostName, string user, string bindingCode, string data) {
            return base.Channel.SendBindingDataAsync(hostName, user, bindingCode, data);
        }
        
        public void SendData(string hostName, string user, string bindingCode, string data) {
            base.Channel.SendData(hostName, user, bindingCode, data);
        }
        
        public System.Threading.Tasks.Task SendDataAsync(string hostName, string user, string bindingCode, string data) {
            return base.Channel.SendDataAsync(hostName, user, bindingCode, data);
        }
        
        public void LogProcess(string logProcessTypeCode, string logObjectKey, string bindingCode, string hostName, int userId) {
            base.Channel.LogProcess(logProcessTypeCode, logObjectKey, bindingCode, hostName, userId);
        }
        
        public System.Threading.Tasks.Task LogProcessAsync(string logProcessTypeCode, string logObjectKey, string bindingCode, string hostName, int userId) {
            return base.Channel.LogProcessAsync(logProcessTypeCode, logObjectKey, bindingCode, hostName, userId);
        }
        
        public void CreateUnloadVideoFragmentsTask(string securityCameraProcessLogTypeCode, string logObjectKey, string entityCode) {
            base.Channel.CreateUnloadVideoFragmentsTask(securityCameraProcessLogTypeCode, logObjectKey, entityCode);
        }
        
        public System.Threading.Tasks.Task CreateUnloadVideoFragmentsTaskAsync(string securityCameraProcessLogTypeCode, string logObjectKey, string entityCode) {
            return base.Channel.CreateUnloadVideoFragmentsTaskAsync(securityCameraProcessLogTypeCode, logObjectKey, entityCode);
        }
        
        public void CreateUnloadAndSendVideoTask(string securityCameraProcessLogTypeCode, string logObjectKey, string supplierLogo, string notificationEmails) {
            base.Channel.CreateUnloadAndSendVideoTask(securityCameraProcessLogTypeCode, logObjectKey, supplierLogo, notificationEmails);
        }
        
        public System.Threading.Tasks.Task CreateUnloadAndSendVideoTaskAsync(string securityCameraProcessLogTypeCode, string logObjectKey, string supplierLogo, string notificationEmails) {
            return base.Channel.CreateUnloadAndSendVideoTaskAsync(securityCameraProcessLogTypeCode, logObjectKey, supplierLogo, notificationEmails);
        }
        
        public void StartSendVideoProcessing() {
            base.Channel.StartSendVideoProcessing();
        }
        
        public System.Threading.Tasks.Task StartSendVideoProcessingAsync() {
            return base.Channel.StartSendVideoProcessingAsync();
        }
        
        public void StopSendVideoProcessing() {
            base.Channel.StopSendVideoProcessing();
        }
        
        public System.Threading.Tasks.Task StopSendVideoProcessingAsync() {
            return base.Channel.StopSendVideoProcessingAsync();
        }
        
        public bool IsSendVideoProcessingStarted() {
            return base.Channel.IsSendVideoProcessingStarted();
        }
        
        public System.Threading.Tasks.Task<bool> IsSendVideoProcessingStartedAsync() {
            return base.Channel.IsSendVideoProcessingStartedAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SecurityCameraService.IWmsService")]
    public interface IWmsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/IsAlive", ReplyAction="http://tempuri.org/IWmsService/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/IsAlive", ReplyAction="http://tempuri.org/IWmsService/IsAliveResponse")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetConnectionStrings", ReplyAction="http://tempuri.org/IWmsService/GetConnectionStringsResponse")]
        string[] GetConnectionStrings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetConnectionStrings", ReplyAction="http://tempuri.org/IWmsService/GetConnectionStringsResponse")]
        System.Threading.Tasks.Task<string[]> GetConnectionStringsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetVersions", ReplyAction="http://tempuri.org/IWmsService/GetVersionsResponse")]
        string[] GetVersions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetVersions", ReplyAction="http://tempuri.org/IWmsService/GetVersionsResponse")]
        System.Threading.Tasks.Task<string[]> GetVersionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetEndpoints", ReplyAction="http://tempuri.org/IWmsService/GetEndpointsResponse")]
        string[] GetEndpoints();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetEndpoints", ReplyAction="http://tempuri.org/IWmsService/GetEndpointsResponse")]
        System.Threading.Tasks.Task<string[]> GetEndpointsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetConfiguration", ReplyAction="http://tempuri.org/IWmsService/GetConfigurationResponse")]
        string GetConfiguration();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetConfiguration", ReplyAction="http://tempuri.org/IWmsService/GetConfigurationResponse")]
        System.Threading.Tasks.Task<string> GetConfigurationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/ClearCache", ReplyAction="http://tempuri.org/IWmsService/ClearCacheResponse")]
        void ClearCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/ClearCache", ReplyAction="http://tempuri.org/IWmsService/ClearCacheResponse")]
        System.Threading.Tasks.Task ClearCacheAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetCache", ReplyAction="http://tempuri.org/IWmsService/GetCacheResponse")]
        System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>> GetCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetCache", ReplyAction="http://tempuri.org/IWmsService/GetCacheResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>>> GetCacheAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/SetWcfLogging", ReplyAction="http://tempuri.org/IWmsService/SetWcfLoggingResponse")]
        void SetWcfLogging(string isEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/SetWcfLogging", ReplyAction="http://tempuri.org/IWmsService/SetWcfLoggingResponse")]
        System.Threading.Tasks.Task SetWcfLoggingAsync(string isEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetComment", ReplyAction="http://tempuri.org/IWmsService/GetCommentResponse")]
        string GetComment(string param);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetComment", ReplyAction="http://tempuri.org/IWmsService/GetCommentResponse")]
        System.Threading.Tasks.Task<string> GetCommentAsync(string param);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/IsWorking", ReplyAction="http://tempuri.org/IWmsService/IsWorkingResponse")]
        bool IsWorking();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/IsWorking", ReplyAction="http://tempuri.org/IWmsService/IsWorkingResponse")]
        System.Threading.Tasks.Task<bool> IsWorkingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetCounter", ReplyAction="http://tempuri.org/IWmsService/GetCounterResponse")]
        System.IO.Stream GetCounter(string param);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWmsService/GetCounter", ReplyAction="http://tempuri.org/IWmsService/GetCounterResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetCounterAsync(string param);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWmsServiceChannel : EmExServiceClient.SecurityCameraService.IWmsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WmsServiceClient : System.ServiceModel.ClientBase<EmExServiceClient.SecurityCameraService.IWmsService>, EmExServiceClient.SecurityCameraService.IWmsService {
        
        public WmsServiceClient() {
        }
        
        public WmsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WmsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WmsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WmsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
        
        public string[] GetConnectionStrings() {
            return base.Channel.GetConnectionStrings();
        }
        
        public System.Threading.Tasks.Task<string[]> GetConnectionStringsAsync() {
            return base.Channel.GetConnectionStringsAsync();
        }
        
        public string[] GetVersions() {
            return base.Channel.GetVersions();
        }
        
        public System.Threading.Tasks.Task<string[]> GetVersionsAsync() {
            return base.Channel.GetVersionsAsync();
        }
        
        public string[] GetEndpoints() {
            return base.Channel.GetEndpoints();
        }
        
        public System.Threading.Tasks.Task<string[]> GetEndpointsAsync() {
            return base.Channel.GetEndpointsAsync();
        }
        
        public string GetConfiguration() {
            return base.Channel.GetConfiguration();
        }
        
        public System.Threading.Tasks.Task<string> GetConfigurationAsync() {
            return base.Channel.GetConfigurationAsync();
        }
        
        public void ClearCache() {
            base.Channel.ClearCache();
        }
        
        public System.Threading.Tasks.Task ClearCacheAsync() {
            return base.Channel.ClearCacheAsync();
        }
        
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>> GetCache() {
            return base.Channel.GetCache();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>>> GetCacheAsync() {
            return base.Channel.GetCacheAsync();
        }
        
        public void SetWcfLogging(string isEnabled) {
            base.Channel.SetWcfLogging(isEnabled);
        }
        
        public System.Threading.Tasks.Task SetWcfLoggingAsync(string isEnabled) {
            return base.Channel.SetWcfLoggingAsync(isEnabled);
        }
        
        public string GetComment(string param) {
            return base.Channel.GetComment(param);
        }
        
        public System.Threading.Tasks.Task<string> GetCommentAsync(string param) {
            return base.Channel.GetCommentAsync(param);
        }
        
        public bool IsWorking() {
            return base.Channel.IsWorking();
        }
        
        public System.Threading.Tasks.Task<bool> IsWorkingAsync() {
            return base.Channel.IsWorkingAsync();
        }
        
        public System.IO.Stream GetCounter(string param) {
            return base.Channel.GetCounter(param);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetCounterAsync(string param) {
            return base.Channel.GetCounterAsync(param);
        }
    }
}
